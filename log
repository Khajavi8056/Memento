//+------------------------------------------------------------------+
//|                                                      Memento.mq5 |
//|                                  Copyright 2025,hipoalgoritm |
//|                                                  Final & Bulletproof |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025,hipoalgoritm"
#property link      "https://www.mql5.com"
#property version   "1.7" // نسخه نهایی و کاملا اصلاح شده
#property description "اکسپرت معاملاتی پیشرفته ممنتو بر اساس استراتژی کراس سه گانه ایچیموکو"


#include <Trade\Trade.mqh>
#include <Object.mqh>
#include "IchimokuLogic.mqh"
#include "VisualManager.mqh"
#include "TrailingStopManager.mqh"

#include  "licensed.mqh"

//--- متغیرهای سراسری
SSettings            g_settings;
string               g_symbols_array[];
CStrategyManager* g_symbol_managers[];
bool              g_dashboard_needs_update = true; // پرچم برای آپدیت هوشمند داشبورد
CTrailingStopManager TrailingStop;
//+------------------------------------------------------------------+
//| تابع شروع اکسپرت (مقداردهی اولیه)                                |
//+------------------------------------------------------------------+
////+------------------------------------------------------------------+
//| تابع شروع اکسپرت (مقداردهی اولیه)                                |
//+------------------------------------------------------------------+
int OnInit() {
//--- ✅✅✅ بخش مقداردهی اولیه تنظیمات (نسخه کامل و هماهنگ با فاز ۱) ✅✅✅ ---

// 1. تنظیمات عمومی
   g_settings.enable_dashboard           = Inp_Enable_Dashboard;
   g_settings.symbols_list                 = Inp_Symbols_List;
   g_settings.magic_number                 = Inp_Magic_Number;
   g_settings.enable_logging               = Inp_Enable_Logging;

// 2. تنظیمات ایچیموکو
   g_settings.tenkan_period                = Inp_Tenkan_Period;
   g_settings.kijun_period                 = Inp_Kijun_Period;
   g_settings.senkou_period                = Inp_Senkou_Period;
   g_settings.chikou_period                = Inp_Chikou_Period;

// 3. تنظیمات سیگنال و تاییدیه
   g_settings.signal_mode                  = Inp_Signal_Mode;
   g_settings.confirmation_type            = Inp_Confirmation_Type;
   g_settings.grace_period_candles         = Inp_Grace_Period_Candles;

// 3.1. تنظیمات تلاقی (با ورودی‌های جدید)
   g_settings.talaqi_calculation_mode      = Inp_Talaqi_Calculation_Mode;
   g_settings.talaqi_atr_multiplier        = Inp_Talaqi_ATR_Multiplier;
   g_settings.talaqi_distance_in_points    = Inp_Talaqi_Distance_in_Points;
   g_settings.talaqi_kumo_factor           = Inp_Talaqi_Kumo_Factor;

// 4. تنظیمات حد ضرر (با ورودی‌های جدید)
   g_settings.stoploss_type                = Inp_StopLoss_Type;
   g_settings.sl_atr_multiplier            = Inp_SL_ATR_Multiplier;
   g_settings.flat_kijun_period            = Inp_Flat_Kijun_Period;
   g_settings.flat_kijun_min_length        = Inp_Flat_Kijun_Min_Length;
   g_settings.pivot_lookback               = Inp_Pivot_Lookback;
   g_settings.sl_lookback_period           = Inp_SL_Lookback_Period;
   g_settings.sl_buffer_multiplier         = Inp_SL_Buffer_Multiplier;

// 5. تنظیمات مدیریت سرمایه
   g_settings.risk_percent_per_trade       = Inp_Risk_Percent_Per_Trade;
   g_settings.take_profit_ratio            = Inp_Take_Profit_Ratio;
   g_settings.max_trades_per_symbol        = Inp_Max_Trades_Per_Symbol;
   g_settings.max_total_trades             = Inp_Max_Total_Trades;

// 6. تنظیمات گرافیکی
   g_settings.object_size_multiplier       = Inp_Object_Size_Multiplier;
   g_settings.bullish_color                = Inp_Bullish_Color;
   g_settings.bearish_color                = Inp_Bearish_Color;

//--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

//--- تقسیم رشته نمادها و ایجاد شیء مدیریت برای هر نماد (بدون تغییر)
   int symbols_count = StringSplit(g_settings.symbols_list, ',', g_symbols_array);
   if (symbols_count == 0) {
      Print("خطا: هیچ نمادی برای معامله مشخص نشده است.");
      return INIT_FAILED;
   }

   ArrayResize(g_symbol_managers, symbols_count);
   for (int i = 0; i < symbols_count; i++) {
      string sym = g_symbols_array[i];
      StringTrimLeft(sym);
      StringTrimRight(sym);
      g_symbol_managers[i] = new CStrategyManager(sym, g_settings);
      if (g_symbol_managers[i].Init() == false) {
         Print("مقداردهی اولیه نماد ", sym, " با خطا مواجه شد. عملیات متوقف می‌شود.");

         // === بخش حیاتی پاکسازی برای جلوگیری از نشت حافظه ===
         // تمام مدیرهایی که تا این لحظه (قبل از خطا) با موفقیت ساخته شده‌اند را حذف کن
         for (int j = 0; j <= i; j++) {
            if (g_symbol_managers[j] != NULL) {
               delete g_symbol_managers[j];
               g_symbol_managers[j] = NULL;
            }
         }
         ArrayFree(g_symbol_managers); // آرایه سراسری را هم آزاد کن
         // === پایان بخش پاکسازی ===

         return INIT_FAILED;
      }
   }
//=

   Print("اکسپرت Memento با موفقیت برای نمادهای زیر مقداردهی اولیه شد: ", g_settings.symbols_list);
   TrailingStop.Init(Inp_Magic_Number);

//--- راه‌اندازی تایمر برای اجرای مداوم
   EventSetTimer(1);
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| تابع پایان اکسپرت (پاکسازی)                                      |
//+------------------------------------------------------------------+
void OnDeinit(const int reason) {
   EventKillTimer();
//--- پاکسازی شیءها
   for (int i = 0; i < ArraySize(g_symbol_managers); i++) {
      if (g_symbol_managers[i] != NULL) {
         delete g_symbol_managers[i];
         g_symbol_managers[i] = NULL;
      }
   }
   ArrayFree(g_symbol_managers);


//--- پاک کردن تمام اشیاء گرافیکی با پیشوند صحیح
   ObjectsDeleteAll(0, "MEMENTO_UI_");
   ChartRedraw();

}
void OnTick(void)
      {
       if(CheckLicenseExpiry()==false)
{
ExpertRemove();
//return(INIT_FAILED);
}
      }
//+------------------------------------------------------------------+
//| تابع تایمر (بررسی مداوم کندل‌ها و سیگنال‌ها)                      |
//+------------------------------------------------------------------+
void OnTimer() {



   TrailingStop.Process();
//--- اجرای منطق برای تمام نمادهای تحت مدیریت
   for (int i = 0; i < ArraySize(g_symbol_managers); i++) {
      if (g_symbol_managers[i] != NULL) {
         g_symbol_managers[i].ProcessNewBar();
      }
   }

//--- آپدیت هوشمند داشبورد فقط در صورت نیاز
   if (g_dashboard_needs_update) {
      // پیدا کردن نمونه‌ای از منیجر که مسئول چارت اصلی است
      for (int i = 0; i < ArraySize(g_symbol_managers); i++) {
         if (g_symbol_managers[i] != NULL && g_symbol_managers[i].GetSymbol() == _Symbol) {
            g_symbol_managers[i].UpdateMyDashboard();
            Print("داشبورد به دلیل رویداد معاملاتی آپدیت شد.");
            break; // بعد از آپدیت از حلقه خارج شو
         }
      }
      g_dashboard_needs_update = false; // پرچم را برای آپدیت بعدی ریست کن
   }
}





//+------------------------------------------------------------------+
//| تابع رویدادهای معاملاتی                                           |
//+------------------------------------------------------------------+
//
void OnTradeTransaction(const MqlTradeTransaction &trans,
                        const MqlTradeRequest &request,
                        const MqlTradeResult &result) {
// ما فقط به رویدادهایی که یک معامله به تاریخچه اضافه می‌کنند علاقه داریم
   if (trans.type == TRADE_TRANSACTION_DEAL_ADD && trans.deal > 0) {
      // اطلاعات معامله را از تاریخچه می‌گیریم
      ulong deal_ticket = trans.deal;
      if(HistoryDealSelect(deal_ticket)) {
         // چک می‌کنیم معامله مربوط به همین اکسپرت باشه
         if(HistoryDealGetInteger(deal_ticket, DEAL_MAGIC) == (long)g_settings.magic_number) {
            // اگر معامله از نوع خروج از پوزیشن بود (بسته شدن)
            if(HistoryDealGetInteger(deal_ticket, DEAL_ENTRY) == DEAL_ENTRY_OUT) {
               string deal_symbol = HistoryDealGetString(deal_ticket, DEAL_SYMBOL);

               // مدیر استراتژی مربوط به این نماد را پیدا می‌کنیم
               for(int i = 0; i < ArraySize(g_symbol_managers); i++) {
                  if(g_symbol_managers[i] != NULL && g_symbol_managers[i].GetSymbol() == deal_symbol) {
                     // مدیر گرافیک آن را می‌گیریم
                     CVisualManager *visual_manager = g_symbol_managers[i].GetVisualManager();
                     if(visual_manager != NULL) {
                        // ایندکس نماد را در داشبورد پیدا می‌کنیم
                        int symbol_index = visual_manager.GetSymbolIndex(deal_symbol);
                        if(symbol_index != -1) {
                           // اطلاعات سود و زیان را می‌گیریم
                           double p = HistoryDealGetDouble(deal_ticket, DEAL_PROFIT);
                           double c = HistoryDealGetDouble(deal_ticket, DEAL_COMMISSION);
                           double s = HistoryDealGetDouble(deal_ticket, DEAL_SWAP);

                           // و دفترچه حسابداری را آپدیت می‌کنیم
                           visual_manager.UpdateDashboardCache(symbol_index, p, c, s);
                        }
                     }
                     break; // مدیر پیدا شد، از حلقه خارج شو
                  }
               }
            }

            // در هر صورت (چه باز شدن و چه بسته شدن) داشبورد نیاز به آپدیت دارد
            g_dashboard_needs_update = true;
         }
      }
   }
}



//+------------------------------------------------------------------+
//| تابع مدیریت رویدادهای چارت (برای کلیک روی دکمه)                   |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam) {
// اگر رویداد از نوع کلیک روی یک آبجکت بود
   if(id == CHARTEVENT_OBJECT_CLICK) {
      // مدیر استراتژی مربوط به چارت فعلی را پیدا کن
      for(int i = 0; i < ArraySize(g_symbol_managers); i++) {
         if(g_symbol_managers[i] != NULL && g_symbol_managers[i].GetSymbol() == _Symbol) {
            // رویداد را برای پردازش به مدیر گرافیک ارسال کن
            g_symbol_managers[i].GetVisualManager().OnChartEvent(id, lparam, dparam, sparam);
            break; // کار تمام است، از حلقه خارج شو
         }
      }
   }
}
//+------------------------------------------------------------------+



//--- گروه: تنظیمات بهینه‌سازی سفارشی ---
input group "  تنظیمات بهینه‌سازی سفارشی";
input int InpMinTradesPerYear = 30; // حداقل تعداد معاملات قابل قبول در یک سال
input int InpMaxAcceptableDrawdown = 15;


//+------------------------------------------------------------------+
//| تابع اصلی رویداد تستر که امتیاز نهایی را محاسبه می‌کند.          |
//+------------------------------------------------------------------+
double OnTester()
{
   // --- 1. گرفتن تمام آمارهای استاندارد مورد نیاز ---
   double total_trades         = TesterStatistics(STAT_TRADES);
   double net_profit           = TesterStatistics(STAT_PROFIT);
   double profit_factor        = TesterStatistics(STAT_PROFIT_FACTOR);
   double sharpe_ratio         = TesterStatistics(STAT_SHARPE_RATIO);
   double max_balance_drawdown_percent = TesterStatistics(STAT_BALANCE_DDREL_PERCENT);

   // --- 2. محاسبه حداقل تعداد معاملات مورد نیاز (بدون تغییر) ---
   datetime startDate = 0, endDate = 0;
   if(HistoryDealsTotal() > 0)
     {
      startDate = (datetime)HistoryDealGetInteger(0, DEAL_TIME);
      endDate   = (datetime)HistoryDealGetInteger(HistoryDealsTotal() - 1, DEAL_TIME);
     }
   double duration_days = (endDate > startDate) ? double(endDate - startDate) / (24.0 * 3600.0) : 1.0;
   double required_min_trades = floor((duration_days / 365.0) * InpMinTradesPerYear);
   if(required_min_trades < 10) required_min_trades = 10;

   // --- 3. فیلترهای ورودی نهایی (بدون تغییر) ---
   if(total_trades < required_min_trades || profit_factor < 1.1 || sharpe_ratio <= 0 || net_profit <= 0)
     {
      return 0.0;
     }

   // --- 4. محاسبه معیارهای پیشرفته (بدون تغییر) ---
   double r_squared = 0, downside_consistency = 0;
   CalculateAdvancedMetrics(r_squared, downside_consistency);

   // --- 5. *** مهندسی امتیاز: محاسبه "ضریب مجازات" با منحنی کسینوسی *** ---
   double drawdown_penalty_factor = 0.0;
   if (max_balance_drawdown_percent < InpMaxAcceptableDrawdown && InpMaxAcceptableDrawdown > 0) 
   {
      // دراودان رو به یک زاویه بین 0 تا 90 درجه (π/2 رادیان) تبدیل می‌کنیم
      double angle = (max_balance_drawdown_percent / InpMaxAcceptableDrawdown) * (M_PI / 2.0);
      
      // ضریب مجازات، کسینوس اون زاویه است. هرچی زاویه (دراودان) بیشتر، کسینوس (امتیاز) کمتر
      drawdown_penalty_factor = cos(angle);
   }
   // اگر دراودان بیشتر از حد مجاز باشه، ضریب صفر می‌مونه و کل پاس رد میشه

   // --- 6. محاسبه امتیاز نهایی جامع با فرمول جدید و پیوسته ---
   double final_score = 0.0;
   if(drawdown_penalty_factor > 0)
   {
      // استفاده از log برای نرمال‌سازی و جلوگیری از تاثیر بیش از حد اعداد بزرگ
      double trades_factor = log(total_trades + 1); // +1 برای جلوگیری از log(0)
      double net_profit_factor = log(net_profit + 1);

      final_score = (profit_factor * sharpe_ratio * r_squared * downside_consistency * trades_factor * net_profit_factor) 
                     * drawdown_penalty_factor; // ضرب در ضریب مجازات جدید و هوشمند
   }

   // --- 7. چاپ نتیجه برای دیباگ ---
   PrintFormat("نتیجه: Trades=%d, PF=%.2f, Sharpe=%.2f, R²=%.3f, BalDD=%.2f%%, Penalty=%.2f -> امتیاز: %.4f",
               (int)total_trades, profit_factor, sharpe_ratio, r_squared, max_balance_drawdown_percent, drawdown_penalty_factor, final_score);

   return final_score;
}

// تابع CalculateAdvancedMetrics بدون هیچ تغییری باقی می‌ماند
void CalculateAdvancedMetrics(double &r_squared, double &downside_consistency)
{
   r_squared = 0;
   downside_consistency = 1.0;

   if(!HistorySelect(0, TimeCurrent())) return;
   uint total_deals = HistoryDealsTotal();
   if(total_deals < 5) return;

   EquityPoint equity_curve[];
   ArrayResize(equity_curve, (int)total_deals + 2);

   double final_balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double net_profit = TesterStatistics(STAT_PROFIT);
   double initial_balance = final_balance - net_profit;
   
   double current_balance = initial_balance;
   equity_curve[0].time      = (datetime)HistoryDealGetInteger(0, DEAL_TIME) - 1;
   equity_curve[0].balance   = current_balance;

   int equity_points = 1;
   for(uint i = 0; i < total_deals; i++)
     {
      ulong ticket = HistoryDealGetTicket(i);
      if(ticket > 0)
        {
         if(HistoryDealGetInteger(ticket, DEAL_ENTRY) == DEAL_ENTRY_OUT)
           {
            current_balance += HistoryDealGetDouble(ticket, DEAL_PROFIT) + HistoryDealGetDouble(ticket, DEAL_COMMISSION) + HistoryDealGetDouble(ticket, DEAL_SWAP);
            equity_curve[equity_points].time = (datetime)HistoryDealGetInteger(ticket, DEAL_TIME);
            equity_curve[equity_points].balance = current_balance;
            equity_points++;
           }
        }
     }
   ArrayResize(equity_curve, equity_points);
   if(equity_points < 3) return;
   
   double sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0, sum_y2 = 0;
   for(int i = 0; i < equity_points; i++)
     {
      double x = i + 1.0; double y = equity_curve[i].balance;
      sum_x += x; sum_y += y; sum_xy += x * y; sum_x2 += x*x; sum_y2 += y*y;
     }
   double n = equity_points;
   double den_part1 = (n*sum_x2) - (sum_x*sum_x);
   double den_part2 = (n*sum_y2) - (sum_y*sum_y);
   if(den_part1 > 0 && den_part2 > 0)
     {
      double r = ((n*sum_xy) - (sum_x*sum_y)) / sqrt(den_part1 * den_part2);
      r_squared = r*r;
     }

   MonthlyTrades monthly_counts[];
   int total_months = 0;
   
   for(uint i=0; i<total_deals; i++)
     {
      ulong ticket = HistoryDealGetTicket(i);
      if(ticket > 0 && HistoryDealGetInteger(ticket, DEAL_ENTRY) == DEAL_ENTRY_OUT)
        {
         datetime deal_time = (datetime)HistoryDealGetInteger(ticket, DEAL_TIME);
         MqlDateTime dt;
         TimeToStruct(deal_time, dt);
         
         int month_idx = -1;
         for(int j=0; j<total_months; j++) {
            if(monthly_counts[j].year == dt.year && monthly_counts[j].month == dt.mon) {
               month_idx = j;
               break;
            }
         }
         
         if(month_idx == -1) {
            ArrayResize(monthly_counts, total_months + 1);
            monthly_counts[total_months].year = dt.year;
            monthly_counts[total_months].month = dt.mon;
            monthly_counts[total_months].count = 1;
            total_months++;
         } else {
            monthly_counts[month_idx].count++;
         }
        }
     }

   if(total_months <= 1) {
      downside_consistency = 1.0;
      return;
   }

   double target_trades_per_month = InpMinTradesPerYear / 12.0;
   if (target_trades_per_month < 1) target_trades_per_month = 1;


   double sum_of_squared_downside_dev = 0;
   for(int i = 0; i < total_months; i++) {
      if(monthly_counts[i].count < target_trades_per_month) {
         double deviation = target_trades_per_month - monthly_counts[i].count;
         sum_of_squared_downside_dev += deviation * deviation;
      }
   }

   double downside_variance = sum_of_squared_downside_dev / total_months;
   double downside_deviation = sqrt(downside_variance);

   downside_consistency = 1.0 / (1.0 + downside_deviation);
}



//+------------------------------------------------------------------+
//|    بخش بهینه‌سازی سفارشی (Custom Optimization) نسخه 10.0 - نهایی   |
//|      با "منحنی مجازات دراوداون پیوسته" (Continuous Penalty Curve)     |
//+------------------------------------------------------------------+

//--- ساختارهای کمکی (بدون تغییر)
struct EquityPoint
{
   datetime time;
   double   balance;
};
struct MonthlyTrades
{
   int      year;
   int      month;
   int      count;
};





________________________________________________________________________________________________________________________________


//+------------------------------------------------------------------+
//|                                     IchimokuLogic.mqh            |
//|                          © 2025, hipoalgoritm              |
//+------------------------------------------------------------------+
#property copyright "© 2025,hipoalgoritm"
#property link      "https://www.mql5.com"
#property version   "1.4" 
#include "set.mqh"
#include <Trade\Trade.mqh>
#include <Trade\SymbolInfo.mqh>
#include <Object.mqh>
#include "VisualManager.mqh"
//--- تعریف ساختار سیگنال
struct SPotentialSignal
{
    datetime        time;
    bool            is_buy;
    int             grace_candle_count;
    
    // +++ این بخش رو اضافه کن +++
    // سازنده کپی (Copy Constructor)
    SPotentialSignal(const SPotentialSignal &other)
    {
        time = other.time;
        is_buy = other.is_buy;
        grace_candle_count = other.grace_candle_count;
    }
    // سازنده پیش‌فرض (برای اینکه کد به مشکل نخوره)
    SPotentialSignal()
    {
       // خالی می‌مونه
    }
    // +++ پایان بخش اضافه شده +++
};

 
/*struct SSettings
{
    string              symbols_list;
    int                 magic_number;
    bool                enable_logging;

    int                 tenkan_period;
    int                 kijun_period;
    int                 senkou_period;
    int                 chikou_period;

    E_Confirmation_Mode confirmation_type;
    int                 grace_period_candles;
    double              talaqi_distance_in_points;

    E_SL_Mode           stoploss_type;
    int                 sl_lookback_period;
    double              sl_buffer_multiplier;

    double              risk_percent_per_trade;
    double              take_profit_ratio;
    int                 max_trades_per_symbol;
    int                 max_total_trades;

    double              object_size_multiplier;
    color               bullish_color;
    color               bearish_color;
};
*/

//================================================================
//+------------------------------------------------------------------+
//| کلاس مدیریت استراتژی برای یک نماد خاص                             |
//+------------------------------------------------------------------+
class CStrategyManager
{
private:
    string              m_symbol;
    SSettings           m_settings;
    CTrade              m_trade;
   
    datetime            m_last_bar_time;
    
    int                 m_ichimoku_handle;
    int                 m_atr_handle;      

    double              m_tenkan_buffer[];
    double              m_kijun_buffer[];
    double              m_chikou_buffer[];
    double              m_high_buffer[];
    double              m_low_buffer[];
    
    SPotentialSignal    m_signal;
    bool                m_is_waiting;
    SPotentialSignal    m_potential_signals[];
    CVisualManager* m_visual_manager;
    
    //--- توابع کمکی
    void Log(string message);
    void AddOrUpdatePotentialSignal(bool is_buy);
    bool CheckTripleCross(bool& is_buy);
    bool CheckFinalConfirmation(bool is_buy);
    
    //--- محاسبه استاپ لاس
    double CalculateStopLoss(bool is_buy, double entry_price);
    double CalculateAtrStopLoss(bool is_buy, double entry_price);
    double GetTalaqiTolerance(int reference_shift);
    double CalculateAtrTolerance(int reference_shift);
    double CalculateDynamicTolerance(int reference_shift);
  
    double FindFlatKijun();
    double FindPivotKijun(bool is_buy);
    double FindPivotTenkan(bool is_buy);
    double FindBackupStopLoss(bool is_buy, double buffer);
    
    //--- مدیریت معاملات
    int CountSymbolTrades();
    int CountTotalTrades();
    void OpenTrade(bool is_buy);

public:
    CStrategyManager(string symbol, SSettings &settings);
    ~CStrategyManager(); // تخریب‌گر
    bool Init();
    void ProcessNewBar();
    string GetSymbol() const { return m_symbol; }
    void UpdateMyDashboard(); // اعلان تابع آپدیت
    CVisualManager* GetVisualManager() { return m_visual_manager; }
};
//+------------------------------------------------------------------+
//| کانستراکتور کلاس                                                |
//+------------------------------------------------------------------+
CStrategyManager::CStrategyManager(string symbol, SSettings &settings)
{
    m_symbol = symbol;
    m_settings = settings;
    m_last_bar_time = 0;
    m_is_waiting = false;
    ArrayFree(m_potential_signals);
    m_ichimoku_handle = INVALID_HANDLE;
    m_atr_handle = INVALID_HANDLE;
    m_visual_manager = new CVisualManager(m_symbol, m_settings);
}

//+------------------------------------------------------------------+
//| دیستراکتور کلاس (برای پاکسازی)                                   |
//+------------------------------------------------------------------+
CStrategyManager::~CStrategyManager()
{
    // پاک کردن مدیر گرافیک
    if (m_visual_manager != NULL)
    {
        delete m_visual_manager;
        m_visual_manager = NULL;
    }

    // آزاد کردن هندل‌های اندیکاتور
    if(m_ichimoku_handle != INVALID_HANDLE)
        IndicatorRelease(m_ichimoku_handle);
        
    if(m_atr_handle != INVALID_HANDLE)
        IndicatorRelease(m_atr_handle);
}

//+------------------------------------------------------------------+
//| آپدیت کردن داشبورد                                                |
//+------------------------------------------------------------------+
void CStrategyManager::UpdateMyDashboard() 
{ 
    if (m_visual_manager != NULL)
    {
        m_visual_manager.UpdateDashboard();
    }
}
//================================================================


//+------------------------------------------------------------------+
//| مقداردهی اولیه                                                   |
//+------------------------------------------------------------------+
bool CStrategyManager::Init()
{



    // +++ این بخش واکسیناسیون را به اول تابع اضافه کن +++
    // این کد تستر را مجبور می‌کند تا تاریخچه نماد را همگام‌سازی کند
    int attempts = 0;
    while(iBars(m_symbol, _Period) < 200 && attempts < 100) // منتظر می‌مانیم تا حداقل ۲۰۰ کندل در دسترس باشد
    {
        Sleep(100); // یک مکث کوتاه برای دادن فرصت به ترمینال
        // یک درخواست نمایشی برای اطمینان از همگام‌سازی
        MqlRates rates[];
        CopyRates(m_symbol, _Period, 0, 1, rates); 
        attempts++;
    }
    if (iBars(m_symbol, _Period) < 200)
    {
        Log("خطای بحرانی: پس از تلاش‌های مکرر، داده‌های کافی برای نماد " + m_symbol + " بارگذاری نشد.");
        return false; // اگر داده‌ها آماده نشد، این مدیر استراتژی را فعال نکن
    }
    // +++ پایان بخش واکسیناسیون +++


    
    m_trade.SetExpertMagicNumber(m_settings.magic_number);
    m_trade.SetTypeFillingBySymbol(m_symbol);
    
    m_ichimoku_handle = iIchimoku(m_symbol, _Period, m_settings.tenkan_period, m_settings.kijun_period, m_settings.senkou_period);
    if (m_ichimoku_handle == INVALID_HANDLE)
    {
        Log("خطا در ایجاد اندیکاتور Ichimoku.");
        return false;
    }
          // ساخت هندل ATR
      m_atr_handle = iATR(m_symbol, _Period, 14); // فعلا دوره ۱۴ ثابت است
      if (m_atr_handle == INVALID_HANDLE)
      {
          Log("خطا در ایجاد اندیکاتور ATR.");
          return false;
      }

    ArraySetAsSeries(m_tenkan_buffer, true);
    ArraySetAsSeries(m_kijun_buffer, true);
    ArraySetAsSeries(m_chikou_buffer, true);
    ArraySetAsSeries(m_high_buffer, true);
    ArraySetAsSeries(m_low_buffer, true); 
    if (!m_visual_manager.Init())
    {
        Log("خطا در مقداردهی اولیه VisualManager.");
        return false;
    }

    // ✅✅✅ بخش اصلاح شده ✅✅✅
    // فقط نمونه‌ای که نمادش با نماد چارت یکی است، داشبورد را می‌سازد
    if(m_symbol == _Symbol)
    {
         Print("--- DEBUG 1: Master instance found for '", m_symbol, "'. Calling InitDashboard...");
        m_visual_manager.InitDashboard();
    }
    
    Log("با موفقیت مقداردهی اولیه شد.");
    return true;
}
//+------------------------------------------------------------------+
//| تابع اصلی پردازش کندل جدید (پشتیبانی از دو حالت مدیریت سیگنال)   |
//+------------------------------------------------------------------+
void CStrategyManager::ProcessNewBar()
{
    // --- گام ۰: چک کردن کندل جدید و پاکسازی اشیاء قدیمی ---
    datetime current_bar_time = iTime(m_symbol, _Period, 0);
    if (current_bar_time == m_last_bar_time) return; // اگر کندل جدید نبود، خارج شو
    m_last_bar_time = current_bar_time;

        if(m_symbol == _Symbol && m_visual_manager != NULL)
        {
            m_visual_manager.CleanupOldObjects(200);
        }

    //================================================================//
    //                 انتخاب منطق بر اساس تنظیمات ورودی                 //
    //================================================================//

    // --- حالت اول: منطق جایگزینی (فقط جدیدترین سیگنال مهم است) ---
    if (m_settings.signal_mode == MODE_REPLACE_SIGNAL)
    {
        bool is_new_signal_buy = false;
        if (CheckTripleCross(is_new_signal_buy))
        {
            if (m_is_waiting)
            {
                if (is_new_signal_buy != m_signal.is_buy)
                {
                    Log("[حالت جایگزینی] سیگنال جدید و مخالف پیدا شد! سیگنال قبلی کنسل شد.");
                    m_is_waiting = false; 
                }
            }
            
            if (!m_is_waiting)
            {
                m_is_waiting = true;
                m_signal.time = iTime(m_symbol, _Period, m_settings.chikou_period);
                m_signal.is_buy = is_new_signal_buy;
                m_signal.grace_candle_count = 0;
                Log("[حالت جایگزینی] سیگنال اولیه " + (m_signal.is_buy ? "خرید" : "فروش") + " پیدا شد. ورود به حالت انتظار...");
                if(m_symbol == _Symbol && m_visual_manager != NULL) m_visual_manager.DrawTripleCrossRectangle(m_signal.is_buy, m_settings.chikou_period);
            }
        }
    
        if (m_is_waiting)
        {
            if (m_signal.grace_candle_count >= m_settings.grace_period_candles)
            {
                m_is_waiting = false;
                Log("[حالت جایگزینی] زمان تأیید سیگنال به پایان رسید و سیگنال رد شد.");
            }
            else if (CheckFinalConfirmation(m_signal.is_buy))
            {
                m_is_waiting = false; 
                Log("[حالت جایگزینی] سیگنال " + (m_signal.is_buy ? "خرید" : "فروش") + " تأیید نهایی شد. باز کردن معامله...");
                if(m_symbol == _Symbol && m_visual_manager != NULL) m_visual_manager.DrawConfirmationArrow(m_signal.is_buy, 1);
                OpenTrade(m_signal.is_buy);
            }
            else
            {
                m_signal.grace_candle_count++;
                if(m_symbol == _Symbol && m_visual_manager != NULL) m_visual_manager.DrawScanningArea(m_signal.is_buy, m_settings.chikou_period, m_signal.grace_candle_count);
            }
        }
    }
    // --- حالت دوم: منطق مسابقه‌ای (چند نامزد همزمان بررسی می‌شوند) ---
    else if (m_settings.signal_mode == MODE_SIGNAL_CONTEST)
    {
        // فاز اول: پیدا کردن نامزد جدید
        bool is_new_signal_buy = false;
        if (CheckTripleCross(is_new_signal_buy))
        {
            AddOrUpdatePotentialSignal(is_new_signal_buy);
        }

        // فاز دوم: بررسی لیست نامزدها (شروع مسابقه)
        if (ArraySize(m_potential_signals) > 0)
        {
            for (int i = ArraySize(m_potential_signals) - 1; i >= 0; i--)
            {
                // آیا مهلت این نامزد تمام شده؟
                if (m_potential_signals[i].grace_candle_count >= m_settings.grace_period_candles)
                {
                    Log("[حالت مسابقه‌ای] زمان نامزد " + (m_potential_signals[i].is_buy ? "خرید" : "فروش") + " به پایان رسید و از لیست حذف شد.");
                    ArrayRemove(m_potential_signals, i, 1);
                    continue;
                }
            
                // اگر مهلت تمام نشده، آیا تاییدیه نهایی را گرفته؟
                if (CheckFinalConfirmation(m_potential_signals[i].is_buy))
                {
                    // لاگ کردن پیدا شدن برنده مسابقه
                    Log("🏆 [حالت مسابقه‌ای] برنده پیدا شد! سیگنال " + (m_potential_signals[i].is_buy ? "خرید" : "فروش") + " تأیید نهایی شد!");
            
                    // رسم فلش تایید روی چارت
                    if (m_symbol == _Symbol && m_visual_manager != NULL)
                        m_visual_manager.DrawConfirmationArrow(m_potential_signals[i].is_buy, 1);
            
                    // باز کردن معامله بر اساس سیگنال برنده
                    OpenTrade(m_potential_signals[i].is_buy);
            
                    // ✅✅✅ منطق جدید و هوشمندانه مدیریت لیست انتظار ✅✅✅
            
                    // جهت سیگنال برنده را ذخیره کن
                    bool winner_is_buy = m_potential_signals[i].is_buy;
            
                    // از لیست انتظار، فقط نامزدهای هم‌جهت با برنده را حذف کن
                    Log("پاکسازی لیست انتظار: حذف تمام نامزدهای " + (winner_is_buy ? "خرید" : "فروش") + "...");
                    for (int j = ArraySize(m_potential_signals) - 1; j >= 0; j--)
                    {
                        if (m_potential_signals[j].is_buy == winner_is_buy)
                        {
                            ArrayRemove(m_potential_signals, j, 1);
                        }
                    }
                    Log("پاکسازی انجام شد. نامزدهای خلاف جهت در لیست باقی ماندند (در صورت وجود).");
            
                    // از کل تابع پردازش برای این کندل خارج شو چون کارمان تمام شده
                    return;
                }
                // اگر نه، یک کندل به عمرش اضافه کن
                else
                {
                    // آپدیت مستقیم داده اصلی در آرایه
                    m_potential_signals[i].grace_candle_count++;
                    if (m_symbol == _Symbol && m_visual_manager != NULL)
                        m_visual_manager.DrawScanningArea(m_potential_signals[i].is_buy, m_settings.chikou_period, m_potential_signals[i].grace_candle_count);
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| منطق فاز ۱: چک کردن کراس سه گانه (بازنویسی کامل و نهایی)         |
//+------------------------------------------------------------------+
bool CStrategyManager::CheckTripleCross(bool& is_buy)
{
    // --- گام اول: آماده‌سازی داده‌ها ---

    // شیفت زمانی که می‌خوایم در گذشته بررسی کنیم (مثلاً ۲۶ کندل قبل)
    int shift = m_settings.chikou_period;
    
    // اگه به اندازه کافی کندل توی چارت نباشه، از تابع خارج می‌شیم
    if (iBars(m_symbol, _Period) < shift + 2) return false;

    // --- گام دوم: دریافت مقادیر ایچیموکو در گذشته ---

    // دو آرایه برای نگهداری مقادیر تنکان و کیجون در نقطه مرجع و کندل قبل از آن
    double tk_shifted[], ks_shifted[];
    
    // از متاتریدر می‌خوایم که ۲ مقدار آخر تنکان و کیجون رو از نقطه "شیفت" به ما بده
    if(CopyBuffer(m_ichimoku_handle, 0, shift, 2, tk_shifted) < 2 || 
       CopyBuffer(m_ichimoku_handle, 1, shift, 2, ks_shifted) < 2)
    {
       // اگر داده کافی وجود نداشت، ادامه نمی‌دهیم
       return false;
    }
       
    // مقدار تنکان و کیجون در نقطه مرجع (مثلاً کندل ۲۶ قبل)
    double tenkan_at_shift = tk_shifted[0];
    double kijun_at_shift = ks_shifted[0];
    
    // مقدار تنکان و کیجون در کندلِ قبل از نقطه مرجع (مثلاً کندل ۲۷ قبل)
    double tenkan_prev_shift = tk_shifted[1];
    double kijun_prev_shift = ks_shifted[1];

    // --- گام سوم: بررسی شرط اولیه (آیا در گذشته کراس یا تلاقی داشتیم؟) ---

    // آیا کراس صعودی اتفاق افتاده؟ (تنکان از پایین اومده بالای کیجون)
    bool is_cross_up = tenkan_prev_shift < kijun_prev_shift && tenkan_at_shift > kijun_at_shift;
    
    // آیا کراس نزولی اتفاق افتاده؟ (تنکان از بالا اومده پایین کیجون)
    bool is_cross_down = tenkan_prev_shift > kijun_prev_shift && tenkan_at_shift < kijun_at_shift;
    
    // آیا کلاً کراسی داشتیم؟ (یا صعودی یا نزولی، جهتش مهم نیست)
    bool is_tk_cross = is_cross_up || is_cross_down;

    // آیا دو خط خیلی به هم نزدیک بودن (تلاقی)؟
    double tolerance = GetTalaqiTolerance(shift);
    bool is_confluence = (tolerance > 0) ? (MathAbs(tenkan_at_shift - kijun_at_shift) <= tolerance) : false;

    // شرط اصلی اولیه: اگر نه کراسی داشتیم و نه تلاقی، پس سیگنالی در کار نیست و خارج می‌شویم
    if (!is_tk_cross && !is_confluence)
    {
        return false;
    }

    // --- گام چهارم: بررسی شرط نهایی (کراس چیکو اسپن از خطوط گذشته) ---

    // قیمت فعلی که نقش چیکو اسپن را برای گذشته بازی می‌کند (کلوز کندل شماره ۱)
    double chikou_now  = iClose(m_symbol, _Period, 1);
    // قیمت کندل قبل از آن (کلوز کندل شماره ۲)
    double chikou_prev = iClose(m_symbol, _Period, 2); 

    // بالاترین سطح بین تنکان و کیجون در نقطه مرجع
    double upper_line = MathMax(tenkan_at_shift, kijun_at_shift);
    // پایین‌ترین سطح بین تنکان و کیجون در نقطه مرجع
    double lower_line = MathMin(tenkan_at_shift, kijun_at_shift);

    // بررسی برای سیگنال خرید:
    // آیا قیمت فعلی (چیکو) از بالای هر دو خط عبور کرده؟
    bool chikou_crosses_up = chikou_now > upper_line && // شرط ۱: قیمت فعلی باید بالای هر دو خط باشد
                             chikou_prev < upper_line;    // شرط ۲: قیمت قبلی باید زیر بالاترین خط بوده باشد تا "کراس" معنی دهد
    
    if (chikou_crosses_up)
    {
        // اگر بله، نوع سیگنال ما خرید است
        is_buy = true;
        // و یک سیگنال معتبر پیدا کرده‌ایم
        return true; 
    }

    // بررسی برای سیگنال فروش:
    // آیا قیمت فعلی (چیکو) از پایین هر دو خط عبور کرده؟
    bool chikou_crosses_down = chikou_now < lower_line && // شرط ۱: قیمت فعلی باید پایین هر دو خط باشد
                               chikou_prev > lower_line;    // شرط ۲: قیمت قبلی باید بالای پایین‌ترین خط بوده باشد تا "کراس" معنی دهد
    
    if (chikou_crosses_down)
    {
        // اگر بله، نوع سیگنال ما فروش است
        is_buy = false;
        // و یک سیگنال معتبر پیدا کرده‌ایم
        return true; 
    }

    // اگر هیچکدام از شرط‌های کراس چیکو برقرار نبود، پس سیگنالی در کار نیست
    return false;
}


//+------------------------------------------------------------------+
//| منطق فاز ۲: چک کردن تأیید نهایی (بازنویسی کامل و نهایی)          |
//+------------------------------------------------------------------+
bool CStrategyManager::CheckFinalConfirmation(bool is_buy)
{
    // --- گام اول: آماده‌سازی داده‌ها ---

    // اگه کمتر از ۲ کندل در چارت باشه، نمی‌تونیم بررسی کنیم
    if (iBars(m_symbol, _Period) < 2) return false;

    // مقادیر ایچیموکو و کندل رو برای "کندل تاییدیه" (کندل شماره ۱) دریافت می‌کنیم
    CopyBuffer(m_ichimoku_handle, 0, 1, 1, m_tenkan_buffer);
    CopyBuffer(m_ichimoku_handle, 1, 1, 1, m_kijun_buffer);
    
    double tenkan_at_1 = m_tenkan_buffer[0];
    double kijun_at_1 = m_kijun_buffer[0];
    double open_at_1 = iOpen(m_symbol, _Period, 1);
    double close_at_1 = iClose(m_symbol, _Period, 1);
    
    // --- گام دوم: بررسی منطق برای سیگنال خرید ---
    if (is_buy)
    {
        // شرط اولیه خرید: تنکان باید بالای کیجون باشه. اگه نباشه، سیگنال خرید اعتبار نداره
        if (tenkan_at_1 <= kijun_at_1) return false;
        
        // حالا بر اساس تنظیمات ورودی، موقعیت کندل رو چک می‌کنیم
        if (m_settings.confirmation_type == MODE_OPEN_AND_CLOSE)
        {
            // در این حالت، برای تایید خرید، باید هم قیمت باز شدن و هم بسته شدن کندل، بالای هر دو خط باشه
            // استفاده از && (وَ) یعنی تمام این ۴ شرط باید همزمان برقرار باشن
            if (open_at_1 > tenkan_at_1 && open_at_1 > kijun_at_1 && 
                close_at_1 > tenkan_at_1 && close_at_1 > kijun_at_1)
            {
                return true; // تایید شد! سیگنال خرید معتبر است
            }
        }
        else // این حالت یعنی MODE_CLOSE_ONLY
        {
            // در این حالت، فقط کافیه قیمت بسته شدن کندل، بالای هر دو خط باشه
            if (close_at_1 > tenkan_at_1 && close_at_1 > kijun_at_1)
            {
                return true; // تایید شد!
            }
        }
    }
    // --- گام سوم: بررسی منطق برای سیگنال فروش ---
    else // این بخش زمانی اجرا میشه که is_buy برابر با false باشه (یعنی سیگنال فروش داریم)
    {
        // شرط اولیه فروش: تنکان باید پایین کیجون باشه. اگه نباشه، سیگنال فروش اعتبار نداره
        if (tenkan_at_1 >= kijun_at_1) return false;
        
        // حالا بر اساس تنظیمات ورودی، موقعیت کندل رو چک می‌کنیم
        if (m_settings.confirmation_type == MODE_OPEN_AND_CLOSE)
        {
            // برای تایید فروش، باید هم قیمت باز شدن و هم بسته شدن کندل، پایین هر دو خط باشه
            if (open_at_1 < tenkan_at_1 && open_at_1 < kijun_at_1 && 
                close_at_1 < tenkan_at_1 && close_at_1 < kijun_at_1)
            {
                return true; // تایید شد! سیگنال فروش معتبر است
            }
        }
        else // این حالت یعنی MODE_CLOSE_ONLY
        {
            // در این حالت، فقط کافیه قیمت بسته شدن کندل، پایین هر دو خط باشه
            if (close_at_1 < tenkan_at_1 && close_at_1 < kijun_at_1)
            {
                return true; // تایید شد!
            }
        }
    }
    
    // اگر کد به اینجا برسه، یعنی هیچکدام از شرط‌های تایید برقرار نبوده
    return false;
}

//+------------------------------------------------------------------+
//| (جایگزین شد) تابع محاسبه استاپ لاس با پشتیبانی از تمام حالت‌ها     |
//+------------------------------------------------------------------+
double CStrategyManager::CalculateStopLoss(bool is_buy, double entry_price)
{
    double sl_price = 0;
    double buffer = m_settings.sl_buffer_multiplier * SymbolInfoDouble(m_symbol, SYMBOL_POINT);

    switch(m_settings.stoploss_type)
    {
        case MODE_COMPLEX:
            sl_price = FindFlatKijun();
            if (sl_price != 0) return(is_buy ? sl_price - buffer : sl_price + buffer);
            
            sl_price = FindPivotKijun(is_buy);
            if (sl_price != 0) return(is_buy ? sl_price - buffer : sl_price + buffer);
            
            sl_price = FindPivotTenkan(is_buy);
            if (sl_price != 0) return(is_buy ? sl_price - buffer : sl_price + buffer);
            
            // اگر هیچکدام از روش‌های پیچیده جواب نداد، از روش ساده استفاده کن
            return FindBackupStopLoss(is_buy, buffer);

        case MODE_SIMPLE:
            return FindBackupStopLoss(is_buy, buffer);

        case MODE_ATR:
            sl_price = CalculateAtrStopLoss(is_buy, entry_price);
            // اگر محاسبه ATR به هر دلیلی موفقیت‌آمیز نبود، برای امنیت از روش ساده استفاده کن
            if(sl_price == 0)
            {
                Log("محاسبه ATR SL با خطا مواجه شد. استفاده از روش پشتیبان...");
                return FindBackupStopLoss(is_buy, buffer);
            }
            return sl_price;
    }

    return 0.0; // این خط هرگز نباید اجرا شود، اما برای ایمنی کد وجود دارد
}


//---+//+------------------------------------------------------------------+
//| تابع استاپ لاس پشتیبان (بازنویسی کامل بر اساس منطق رنگ مخالف)   |
//+------------------------------------------------------------------+
double CStrategyManager::FindBackupStopLoss(bool is_buy, double buffer)
{
    // تعداد کندلی که می‌خواهیم در گذشته برای پیدا کردن استاپ لاس جستجو کنیم.
    int bars_to_check = m_settings.sl_lookback_period;
    
    // اگر تعداد کندل‌های موجود در چارت کافی نیست، از تابع خارج می‌شویم.
    if (iBars(m_symbol, _Period) < bars_to_check + 1) return 0;
    
    // یک حلقه 'for' می‌سازیم که از کندل شماره ۱ (کندل قبلی) شروع به حرکت به عقب می‌کند.
    for (int i = 1; i <= bars_to_check; i++)
    {
        // رنگ کندلی که در حال بررسی آن هستیم را مشخص می‌کنیم.
        bool is_candle_bullish = (iClose(m_symbol, _Period, i) > iOpen(m_symbol, _Period, i));
        bool is_candle_bearish = (iClose(m_symbol, _Period, i) < iOpen(m_symbol, _Period, i));

        // اگر معامله ما از نوع "خرید" (Buy) باشد...
        if (is_buy)
        {
            // ...پس ما به دنبال اولین کندل با رنگ مخالف، یعنی کندل "نزولی" (Bearish) هستیم.
            if (is_candle_bearish)
            {
                // به محض پیدا کردن اولین کندل نزولی، استاپ لاس را چند پوینت زیر کفِ (Low) همان کندل قرار می‌دهیم.
                double sl_price = iLow(m_symbol, _Period, i) - buffer;
                Log("استاپ لاس ساده: اولین کندل نزولی در شیفت " + (string)i + " پیدا شد.");
                
                // قیمت محاسبه شده را برمی‌گردانیم و کار تابع تمام می‌شود.
                return sl_price;
            }
        }
        // اگر معامله ما از نوع "فروش" (Sell) باشد...
        else // is_sell
        {
            // ...پس ما به دنبال اولین کندل با رنگ مخالف، یعنی کندل "صعودی" (Bullish) هستیم.
            if (is_candle_bullish)
            {
                // به محض پیدا کردن اولین کندل صعودی، استاپ لاس را چند پوینت بالای سقفِ (High) همان کندل قرار می‌دهیم.
                double sl_price = iHigh(m_symbol, _Period, i) + buffer;
                Log("استاپ لاس ساده: اولین کندل صعودی در شیفت " + (string)i + " پیدا شد.");
                
                // قیمت محاسبه شده را برمی‌گردانیم و کار تابع تمام می‌شود.
                return sl_price;
            }
        }
    }
    
    // --- بخش پشتیبانِ پشتیبان ---
    // اگر حلقه 'for' تمام شود و کد به اینجا برسد، یعنی در کل بازه مورد بررسی، هیچ کندل رنگ مخالفی پیدا نشده است.
    // (مثلاً در یک روند خیلی قوی که همه کندل‌ها یک رنگ هستند)
    // در این حالت اضطراری، برای اینکه بدون استاپ لاس نمانیم، از روش قدیمی (پیدا کردن بالاترین/پایین‌ترین قیمت) استفاده می‌کنیم.
    Log("هیچ کندل رنگ مخالفی برای استاپ لاس ساده پیدا نشد. از روش سقف/کف مطلق استفاده می‌شود.");
    
    // داده‌های سقف و کف کندل‌ها را در آرایه‌ها کپی می‌کنیم.
    CopyHigh(m_symbol, _Period, 1, bars_to_check, m_high_buffer);
    CopyLow(m_symbol, _Period, 1, bars_to_check, m_low_buffer);

    if(is_buy)
    {
       // برای خرید، ایندکس پایین‌ترین کندل را پیدا کرده و قیمت Low آن را برمی‌گردانیم.
       int min_index = ArrayMinimum(m_low_buffer, 0, bars_to_check);
       return m_low_buffer[min_index] - buffer;
    }
    else
    {
       // برای فروش، ایندکس بالاترین کندل را پیدا کرده و قیمت High آن را برمی‌گردانیم.
       int max_index = ArrayMaximum(m_high_buffer, 0, bars_to_check);
       return m_high_buffer[max_index] + buffer;
    }
}

//+------------------------------------------------------------------+
//| توابع کمکی دیگر                                                  |
//+------------------------------------------------------------------+
void CStrategyManager::Log(string message)
{
    if (m_settings.enable_logging)
    {
        Print(m_symbol, ": ", message);
    }
}

int CStrategyManager::CountSymbolTrades()
{
    int count = 0;
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        if(PositionGetSymbol(i) == m_symbol && PositionGetInteger(POSITION_MAGIC) == (long)m_settings.magic_number)
        {
            count++;
        }
    }
    return count;
}

int CStrategyManager::CountTotalTrades()
{
    int count = 0;
    for(int i = PositionsTotal() - 1; i >= 0; i--)
    {
        if(PositionGetInteger(POSITION_MAGIC) == (long)m_settings.magic_number)
        {
            count++;
        }
    }
    return count;
}

//+------------------------------------------------------------------+
//| باز کردن معامله (با مدیریت سرمایه اصلاح شده و دقیق)                |
//+------------------------------------------------------------------+
void CStrategyManager::OpenTrade(bool is_buy)
{
    if(CountTotalTrades() >= m_settings.max_total_trades || CountSymbolTrades() >= m_settings.max_trades_per_symbol)
    {
        Log("رسیدن به حد مجاز معاملات. معامله جدید باز نشد.");
        return;
    }

    double entry_price = is_buy ? SymbolInfoDouble(m_symbol, SYMBOL_ASK) : SymbolInfoDouble(m_symbol, SYMBOL_BID);
    double sl = CalculateStopLoss(is_buy, entry_price);

    if(sl == 0)
    {
        Log("خطا در محاسبه استاپ لاس. معامله باز نشد.");
        return;
    }
    
    // ✅✅✅ بخش کلیدی و اصلاح شده ✅✅✅

    // --- گام ۱: محاسبه ریسک به ازای هر معامله به پول حساب ---
    double balance = AccountInfoDouble(ACCOUNT_BALANCE);
    double risk_amount = balance * (m_settings.risk_percent_per_trade / 100.0);

    // --- گام ۲: محاسبه میزان ضرر برای ۱ لات معامله با این استاپ لاس ---
    double loss_for_one_lot = 0;
    string base_currency = AccountInfoString(ACCOUNT_CURRENCY);
    // از تابع تخصصی متاتریدر برای این کار استفاده می‌کنیم
    if(!OrderCalcProfit(is_buy ? ORDER_TYPE_BUY : ORDER_TYPE_SELL, m_symbol, 1.0, entry_price, sl, loss_for_one_lot))
    {
        Log("خطا در محاسبه سود/زیان با OrderCalcProfit. کد خطا: " + (string)GetLastError());
        return;
    }
    loss_for_one_lot = MathAbs(loss_for_one_lot);

    if(loss_for_one_lot <= 0)
    {
        Log("میزان ضرر محاسبه شده برای ۱ لات معتبر نیست. معامله باز نشد.");
        return;
    }

    // --- گام ۳: محاسبه حجم دقیق لات بر اساس ریسک و میزان ضرر ۱ لات ---
    double lot_size = NormalizeDouble(risk_amount / loss_for_one_lot, 2);

    // --- گام ۴: نرمال‌سازی و گرد کردن لات بر اساس محدودیت‌های بروکر ---
    double min_lot = SymbolInfoDouble(m_symbol, SYMBOL_VOLUME_MIN);
    double max_lot = SymbolInfoDouble(m_symbol, SYMBOL_VOLUME_MAX);
    double lot_step = SymbolInfoDouble(m_symbol, SYMBOL_VOLUME_STEP);
    
    // اطمینان از اینکه لات در محدوده مجاز است
    lot_size = MathMax(min_lot, MathMin(max_lot, lot_size));
    
    // گرد کردن لات بر اساس گام مجاز بروکر
    lot_size = MathRound(lot_size / lot_step) * lot_step;

    if(lot_size < min_lot)
    {
        Log("حجم محاسبه شده (" + DoubleToString(lot_size,2) + ") کمتر از حداقل لات مجاز (" + DoubleToString(min_lot,2) + ") است. معامله باز نشد.");
        return;
    }

    // --- گام ۵: محاسبه حد سود و ارسال معامله ---
    double point = SymbolInfoDouble(m_symbol, SYMBOL_POINT);
    double sl_distance_points = MathAbs(entry_price - sl) / point;
    double tp_distance_points = sl_distance_points * m_settings.take_profit_ratio;
    double tp = is_buy ? entry_price + tp_distance_points * point : entry_price - tp_distance_points * point;
    
    int digits = (int)SymbolInfoInteger(m_symbol, SYMBOL_DIGITS);
    sl = NormalizeDouble(sl, digits);
    tp = NormalizeDouble(tp, digits);
    
    string comment = "Memento " + (is_buy ? "Buy" : "Sell");
    MqlTradeResult result;
    
    if(is_buy)
    {
        m_trade.Buy(lot_size, m_symbol, 0, sl, tp, comment);
    }
    else
    {
        m_trade.Sell(lot_size, m_symbol, 0, sl, tp, comment);
    }
    
    // لاگ کردن نتیجه
    if(m_trade.ResultRetcode() == TRADE_RETCODE_DONE)
    {
        Log("معامله " + comment + " با لات " + DoubleToString(lot_size, 2) + " با موفقیت باز شد.");
    }
    else
    {
        Log("خطا در باز کردن معامله " + comment + ": " + (string)m_trade.ResultRetcode() + " - " + m_trade.ResultComment());
    }
}


//+------------------------------------------------------------------+
//| پیدا کردن سطح کیجون سن فلت (صاف)                                  |
//+------------------------------------------------------------------+
double CStrategyManager::FindFlatKijun()
{
    double kijun_values[];
    if (CopyBuffer(m_ichimoku_handle, 1, 1, m_settings.flat_kijun_period, kijun_values) < m_settings.flat_kijun_period)
        return 0.0;

    ArraySetAsSeries(kijun_values, true);

    int flat_count = 1;
    for (int i = 1; i < m_settings.flat_kijun_period; i++)
    {
        if (kijun_values[i] == kijun_values[i - 1])
        {
            flat_count++;
            if (flat_count >= m_settings.flat_kijun_min_length)
            {
                return kijun_values[i]; // سطح فلت پیدا شد
            }
        }
        else
        {
            flat_count = 1; // ریست کردن شمارنده
        }
    }

    return 0.0; // هیچ سطح فلتی پیدا نشد
}

//+------------------------------------------------------------------+
//| پیدا کردن پیوت (نقطه چرخش) روی کیجون سن                          |
//+------------------------------------------------------------------+
double CStrategyManager::FindPivotKijun(bool is_buy)
{
    double kijun_values[];
    if (CopyBuffer(m_ichimoku_handle, 1, 1, m_settings.pivot_lookback, kijun_values) < m_settings.pivot_lookback)
        return 0.0;

    ArraySetAsSeries(kijun_values, true);

    for (int i = 1; i < m_settings.pivot_lookback - 1; i++)
    {
        // برای معامله خرید، دنبال یک دره (پیوت کف) می‌گردیم
        if (is_buy && kijun_values[i] < kijun_values[i - 1] && kijun_values[i] < kijun_values[i + 1])
        {
            return kijun_values[i];
        }
        // برای معامله فروش، دنبال یک قله (پیوت سقف) می‌گردیم
        if (!is_buy && kijun_values[i] > kijun_values[i - 1] && kijun_values[i] > kijun_values[i + 1])
        {
            return kijun_values[i];
        }
    }

    return 0.0; // هیچ پیوتی پیدا نشد
}

//+------------------------------------------------------------------+
//| پیدا کردن پیوت (نقطه چرخش) روی تنکان سن                          |
//+------------------------------------------------------------------+
double CStrategyManager::FindPivotTenkan(bool is_buy)
{
    double tenkan_values[];
    if (CopyBuffer(m_ichimoku_handle, 0, 1, m_settings.pivot_lookback, tenkan_values) < m_settings.pivot_lookback)
        return 0.0;

    ArraySetAsSeries(tenkan_values, true);

    for (int i = 1; i < m_settings.pivot_lookback - 1; i++)
    {
        // برای معامله خرید، دنبال یک دره (پیوت کف) می‌گردیم
        if (is_buy && tenkan_values[i] < tenkan_values[i - 1] && tenkan_values[i] < tenkan_values[i + 1])
        {
            return tenkan_values[i];
        }
        // برای معامله فروش، دنبال یک قله (پیوت سقف) می‌گردیم
        if (!is_buy && tenkan_values[i] > tenkan_values[i - 1] && tenkan_values[i] > tenkan_values[i + 1])
        {
            return tenkan_values[i];
        }
    }

    return 0.0; // هیچ پیوتی پیدا نشد
}

////+------------------------------------------------------------------+
//| (جایگزین شد) مدیر کل گرفتن حد مجاز تلاقی بر اساس حالت انتخابی      |
//+------------------------------------------------------------------+
double CStrategyManager::GetTalaqiTolerance(int reference_shift)
{
    switch(m_settings.talaqi_calculation_mode)
    {
        case TALAQI_MODE_MANUAL:
            return m_settings.talaqi_distance_in_points * SymbolInfoDouble(m_symbol, SYMBOL_POINT);
        
        case TALAQI_MODE_KUMO:
            return CalculateDynamicTolerance(reference_shift); // روش مبتنی بر کومو
        
        case TALAQI_MODE_ATR:
            return CalculateAtrTolerance(reference_shift);     // روش جدید مبتنی بر ATR
            
        default:
            return 0.0;
    }
}


//+------------------------------------------------------------------+
//| (اتوماتیک) محاسبه حد مجاز تلاقی بر اساس ضخامت ابر کومو            |
//|                  (نسخه نهایی و هوشمند)                           |
//+------------------------------------------------------------------+
double CStrategyManager::CalculateDynamicTolerance(int reference_shift)
{
    // اگر ضریب کومو صفر یا منفی باشه، یعنی این روش غیرفعاله
    if(m_settings.talaqi_kumo_factor <= 0) return 0.0;

    // آرایه‌ها برای نگهداری مقادیر سنکو اسپن A و B در گذشته
    double senkou_a_buffer[], senkou_b_buffer[];

    // از متاتریدر می‌خوایم که مقدار سنکو A و B رو در "نقطه X" تاریخی به ما بده
    // بافر 2 = Senkou Span A
    // بافر 3 = Senkou Span B
    if(CopyBuffer(m_ichimoku_handle, 2, reference_shift, 1, senkou_a_buffer) < 1 || 
       CopyBuffer(m_ichimoku_handle, 3, reference_shift, 1, senkou_b_buffer) < 1)
    {
       Log("داده کافی برای محاسبه ضخامت کومو در گذشته وجود ندارد.");
       return 0.0; // اگر داده نبود، مقدار صفر برمی‌گردونیم تا تلاقی چک نشه
    }

    // گام ۱: محاسبه ضخامت کومو در "نقطه X"
    double kumo_thickness = MathAbs(senkou_a_buffer[0] - senkou_b_buffer[0]);

    // اگر ضخامت کومو صفر بود (مثلا در کراس سنکوها)، یه مقدار خیلی کوچیک برگردون
    if(kumo_thickness == 0) return SymbolInfoDouble(m_symbol, SYMBOL_POINT);

    // گام ۲: محاسبه حد مجاز تلاقی بر اساس ضریب ورودی کاربر
    double tolerance = kumo_thickness * m_settings.talaqi_kumo_factor;

    return tolerance;
}


//+------------------------------------------------------------------+
//| (حالت مسابقه‌ای) اضافه کردن سیگنال جدید به لیست نامزدها            |
//+------------------------------------------------------------------+
void CStrategyManager::AddOrUpdatePotentialSignal(bool is_buy)
{
    // وظیفه: این تابع هر سیگنال جدیدی که پیدا می‌شود را به لیست نامزدها اضافه می‌کند
    
    // گام اول: یک نامزد جدید به انتهای لیست اضافه کن
    int total = ArraySize(m_potential_signals);
    ArrayResize(m_potential_signals, total + 1);
    
    // گام دوم: مشخصات نامزد جدید را مقداردهی کن
    m_potential_signals[total].time = iTime(m_symbol, _Period, m_settings.chikou_period);
    m_potential_signals[total].is_buy = is_buy;
    m_potential_signals[total].grace_candle_count = 0; // شمارنده مهلت از صفر شروع می‌شود
    
    // لاگ کردن افزودن نامزد جدید به مسابقه
    Log("[حالت مسابقه‌ای] سیگنال نامزد جدید " + (is_buy ? "خرید" : "فروش") + " به لیست انتظار مسابقه اضافه شد. تعداد کل نامزدها: " + (string)ArraySize(m_potential_signals));
    
    // یک مستطیل برای نمایش سیگنال اولیه روی چارت رسم کن
    if(m_symbol == _Symbol && m_visual_manager != NULL)
    m_visual_manager.DrawTripleCrossRectangle(is_buy, m_settings.chikou_period);

}

//+------------------------------------------------------------------+
//| (جدید) محاسبه حد مجاز تلاقی بر اساس ATR                          |
//+------------------------------------------------------------------+
double CStrategyManager::CalculateAtrTolerance(int reference_shift)
{
    if(m_settings.talaqi_atr_multiplier <= 0) return 0.0;

    double atr_buffer[];
    // استفاده از هندل از پیش ساخته شده کلاس
    if(CopyBuffer(m_atr_handle, 0, reference_shift, 1, atr_buffer) < 1)
    {
        Log("داده کافی برای محاسبه ATR در گذشته وجود ندارد.");
        return 0.0;
    }
    
    double tolerance = atr_buffer[0] * m_settings.talaqi_atr_multiplier;
    return tolerance;
}

//+------------------------------------------------------------------+
//| (جدید) محاسبه حد ضرر اولیه بر اساس ATR                           |
//+------------------------------------------------------------------+
double CStrategyManager::CalculateAtrStopLoss(bool is_buy, double entry_price)
{
    double atr_buffer[];
    // استفاده از هندل از پیش ساخته شده کلاس
    if(CopyBuffer(m_atr_handle, 0, 1, 1, atr_buffer) < 1)
    {
        Log("داده ATR برای محاسبه حد ضرر موجود نیست.");
        return 0.0;
    }
    
    double atr_value = atr_buffer[0];
    double sl_price = 0;

    if(is_buy)
        sl_price = entry_price - (atr_value * m_settings.sl_atr_multiplier);
    else
        sl_price = entry_price + (atr_value * m_settings.sl_atr_multiplier);
            
    return sl_price;
}






______________________________________________________________________________________________________________________





//+------------------------------------------------------------------+
//|                                                                  |
//|                    Project: Memento (By HipoAlgorithm)           |
//|                    File: set.mqh (EA Settings)                   |
//|                    Version: 4.0 (Phase 1 Implementation)         |
//|                    © 2025, Mohammad & Gemini                     |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "© 2025, hipoalgoritm"
#property link      "https://www.mql5.com"
#property version   "4.0" // پیاده‌سازی کامل ورودی‌های فاز ۱

//--- انواع شمارشی برای خوانایی بهتر کد
enum E_Confirmation_Mode { MODE_CLOSE_ONLY, MODE_OPEN_AND_CLOSE };

// +++ enum حد ضرر با افزودن حالت ATR +++
enum E_SL_Mode {
    MODE_COMPLEX,         // پیچیده (کیجون فلت، پیوت و...)
    MODE_SIMPLE,          // ساده (بر اساس رنگ مخالف کندل)
    MODE_ATR              // پویا (مبتنی بر ATR)
};

enum E_Signal_Mode     { MODE_REPLACE_SIGNAL, MODE_SIGNAL_CONTEST };

// +++ enum جدید برای انتخاب حالت محاسبه تلاقی +++
enum E_Talaqi_Mode {
    TALAQI_MODE_MANUAL,     // دستی (بر اساس پوینت)
    TALAQI_MODE_KUMO,       // هوشمند (بر اساس ضخامت کومو)
    TALAQI_MODE_ATR         // پویا (مبتنی بر ATR)
};

//+------------------------------------------------------------------+
//|                      تنظیمات ورودی اکسپرت                         |
//+------------------------------------------------------------------+

// ---=== ⚙️ 1. تنظیمات عمومی (General) ⚙️ ===---
input group           "          ---=== ⚙️ 1. تنظیمات عمومی (General) ⚙️ ===---"
input bool            Inp_Enable_Dashboard  = true;                   // ✅ فعال/غیرفعال کردن داشبورد اطلاعاتی
input string          Inp_Symbols_List      = "EURUSD"; // لیست نمادها (جدا شده با کاما)
input int             Inp_Magic_Number      = 12345;                  // شماره جادویی معاملات
input bool            Inp_Enable_Logging    = true;                   // فعال/غیرفعال کردن لاگ‌ها

// ---=== 📈 2. تنظیمات ایچیموکو (Ichimoku) 📈 ===---
input group           "      ---=== 📈 2. تنظیمات ایچیموکو (Ichimoku) 📈 ===---"
input int             Inp_Tenkan_Period     = 9;                      // دوره تنکان-سن
input int             Inp_Kijun_Period      = 26;                     // دوره کیجون-سن
input int             Inp_Senkou_Period     = 52;                     // دوره سنکو اسپن بی
input int             Inp_Chikou_Period     = 26;                     // دوره چیکو اسپن (نقطه مرجع)

// ---=== 🎯 3. سیگنال و تاییدیه (Signal & Confirmation) 🎯 ===---
input group           "---=== 🎯 3. سیگنال و تاییدیه (Signal & Confirmation) 🎯 ===---"
input E_Signal_Mode   Inp_Signal_Mode         = MODE_SIGNAL_CONTEST;  // روش مدیریت سیگنال
input E_Confirmation_Mode Inp_Confirmation_Type = MODE_OPEN_AND_CLOSE;  // نوع تایید قیمت نهایی
input int             Inp_Grace_Period_Candles= 5;                      // تعداد کندل مهلت برای تاییدیه

// --- زیرگروه تنظیمات تلاقی (Confluence) ---
input group           "         --- تنظیمات تلاقی (Confluence) ---"
input E_Talaqi_Mode   Inp_Talaqi_Calculation_Mode = TALAQI_MODE_KUMO;   // ✅ روش محاسبه فاصله تلاقی
input double          Inp_Talaqi_ATR_Multiplier     = 0.5;              // [ATR Mode] ضریب ATR برای تلاقی
input double          Inp_Talaqi_Distance_in_Points = 3.0;              // [MANUAL Mode] فاصله تلاقی (بر اساس پوینت)
input double          Inp_Talaqi_Kumo_Factor      = 0.2;              // [KUMO Mode] ضریب تلاقی (درصد ضخامت کومو)

// ---=== 🛡️ 4. مدیریت حد ضرر (Stop Loss) 🛡️ ===---
input group           "       ---=== 🛡️ 4. مدیریت حد ضرر (Stop Loss) 🛡️ ===---"
input E_SL_Mode       Inp_StopLoss_Type       = MODE_COMPLEX;           // ✅ روش محاسبه استاپ لاس
input double          Inp_SL_ATR_Multiplier   = 2.5;                    // [ATR Mode] ضریب ATR برای حد ضرر
input int             Inp_Flat_Kijun_Period   = 50;                     // [COMPLEX] تعداد کندل برای جستجوی کیجون فلت
input int             Inp_Flat_Kijun_Min_Length = 5;                    // [COMPLEX] حداقل طول کیجون فلت
input int             Inp_Pivot_Lookback      = 30;                     // [COMPLEX] تعداد کندل برای جستجوی پیوت
input int             Inp_SL_Lookback_Period  = 15;                     // [SIMPLE] دوره نگاه به عقب برای یافتن سقف/کف
input double          Inp_SL_Buffer_Multiplier = 3.0;                   // [SIMPLE/COMPLEX] ضریب بافر برای فاصله از سقف/کف

// ---=== 💰 5. مدیریت سرمایه (Money Management) 💰 ===---
input group           " ---=== 💰 5. مدیریت سرمایه (Money Management) 💰 ===---"
input double          Inp_Risk_Percent_Per_Trade = 1.0;                 // درصد ریسک در هر معامله
input double          Inp_Take_Profit_Ratio   = 1.5;                    // نسبت ریسک به ریوارد برای حد سود
input int             Inp_Max_Trades_Per_Symbol = 1;                    // حداکثر معاملات باز برای هر نماد
input int             Inp_Max_Total_Trades    = 5;                      // حداکثر کل معاملات باز

// ---=== 🎨 6. تنظیمات گرافیکی (Visuals) 🎨 ===---
input group           "        ---=== 🎨 6. تنظیمات گرافیکی (Visuals) 🎨 ===---"
input double          Inp_Object_Size_Multiplier = 1.0;                 // ضریب اندازه اشیاء گرافیکی
input color           Inp_Bullish_Color       = clrLimeGreen;           // رنگ سیگنال و اشیاء خرید
input color           Inp_Bearish_Color       = clrRed;                 // رنگ سیگنال و اشیاء فروش


//+------------------------------------------------------------------+
//|     ساختار اصلی برای نگهداری تمام تنظیمات ورودی (SSettings)       |
//+------------------------------------------------------------------+
struct SSettings
{
    // 1. General
    bool                enable_dashboard;
    string              symbols_list;
    int                 magic_number;
    bool                enable_logging;
    
    // 2. Ichimoku
    int                 tenkan_period;
    int                 kijun_period;
    int                 senkou_period;
    int                 chikou_period;
    
    // 3. Signal & Confirmation
    E_Signal_Mode       signal_mode;
    E_Confirmation_Mode confirmation_type;
    int                 grace_period_candles;
    
    // 3.1. Talaqi (با ساختار جدید)
    E_Talaqi_Mode       talaqi_calculation_mode;
    double              talaqi_atr_multiplier;
    double              talaqi_distance_in_points;
    double              talaqi_kumo_factor;

    // 4. Stop Loss (با ساختار جدید)
    E_SL_Mode           stoploss_type;
    double              sl_atr_multiplier;
    int                 flat_kijun_period;
    int                 flat_kijun_min_length;
    int                 pivot_lookback;
    int                 sl_lookback_period;
    double              sl_buffer_multiplier;
    
    // 5. Money Management
    double              risk_percent_per_trade;
    double              take_profit_ratio;
    int                 max_trades_per_symbol;
    int                 max_total_trades;
    
    // 6. Visuals
    double              object_size_multiplier;
    color               bullish_color;
    color               bearish_color;
};




_________________________________________________________________________________________________________________________



//+------------------------------------------------------------------+
//|                                                                  |
//|                    Project: Memento (By HipoAlgorithm)           |
//|                    File: VisualManager.mqh (Graphics Engine)     |
//|                    Version: 3.5 (Polished & Final)               |
//|                    © 2025, Mohammad & Gemini                     |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "© 2025, hipoalgoritm"
#property link      "https://www.mql5.com"
#property version   "3.5" 

#include "set.mqh" 

// ---===== ثابت‌های طراحی =====---
#define DASHBOARD_Y_POS 30      
#define DASHBOARD_X_GAP 10      
#define BOX_WIDTH 95           
#define BOX_HEIGHT 28           
#define SUB_PANEL_HEIGHT 40     
#define MEMENTO_OBJ_PREFIX "MEMENTO_UI_"

// --- ساختارهای داده ---
struct SPanelBox { string MainBoxName, SymbolLabelName, SubPanelName, TradesLabelName, PlLabelName; };
struct SManagedObject { string ObjectName; long CreationBar; };
struct SDashboardData { int trades_count; double cumulative_pl; };

//+------------------------------------------------------------------+
//| کلاس مدیریت گرافیک                                               |
//+------------------------------------------------------------------+
class CVisualManager
{
private:
    string              m_symbol;
    SSettings           m_settings;
    SPanelBox           m_panel_boxes[];
    string              m_symbols_list[];
    SManagedObject      m_managed_objects[];
    SDashboardData      m_dashboard_data[];
    
    bool                m_is_barchart_visible;
    string              m_chart_button_name;
    string              m_chart_panel_bg_name;
    string              m_chart_panel_title_name;

    void ShowBarChart(bool show);
    void CreateManagedObject(string obj_name, long creation_bar);
    
public:
    CVisualManager(string symbol, SSettings &settings);
    ~CVisualManager();

    bool Init();
    void Deinit();
    void InitDashboard();
    void UpdateDashboard();
    
    // ✅ تابع بازنویسی شده برای رسم مستطیل و فلش کراس اولیه (ثابت)
    void DrawTripleCrossRectangle(bool is_buy, int shift);
    
    // ✅ تابع بازنویسی شده برای رسم فلش تاییدیه نهایی (روی کندل 1)
    void DrawConfirmationArrow(bool is_buy, int shift);
    
    // ✅ تابع بازنویسی شده برای رسم ناحیه اسکن متحرک (رنگی و شفاف)
    void DrawScanningArea(bool is_buy, int start_shift, int current_shift);
    
    void CleanupOldObjects(const int max_age_in_bars);
    int GetSymbolIndex(string symbol);
    void UpdateDashboardCache(int symbol_index, double deal_profit, double deal_commission, double deal_swap);
    
    void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam);
};

//+------------------------------------------------------------------+
//|                      پیاده‌سازی توابع کلاس                        |
//+------------------------------------------------------------------+
CVisualManager::CVisualManager(string symbol, SSettings &settings)
{
    m_symbol = symbol;
    m_settings = settings;
    m_is_barchart_visible = false;
    m_chart_button_name = MEMENTO_OBJ_PREFIX + "ChartToggleButton";
    m_chart_panel_bg_name = MEMENTO_OBJ_PREFIX + "ChartPanelBg";
    m_chart_panel_title_name = MEMENTO_OBJ_PREFIX + "ChartPanelTitle";
}

CVisualManager::~CVisualManager() { Deinit(); }
bool CVisualManager::Init() { ChartSetInteger(0, CHART_SHIFT, 1); ChartSetInteger(0, CHART_SHOW_GRID, false); return true; }
void CVisualManager::Deinit() { ObjectsDeleteAll(0, MEMENTO_OBJ_PREFIX); ChartRedraw(0); }

void CVisualManager::OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam)
{
    if(id == CHARTEVENT_OBJECT_CLICK && sparam == m_chart_button_name)
    {
        m_is_barchart_visible = !m_is_barchart_visible;
        ObjectSetInteger(0, m_chart_button_name, OBJPROP_STATE, m_is_barchart_visible);
        ShowBarChart(m_is_barchart_visible);
        UpdateDashboard(); 
        ChartRedraw(0);
    }
}

void CVisualManager::ShowBarChart(bool show)
{
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_HIDDEN, !show);
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_HIDDEN, !show);

    for(int i=0; i < ArraySize(m_symbols_list); i++)
    {
        string sym = m_symbols_list[i];
        ObjectSetInteger(0, MEMENTO_OBJ_PREFIX + sym + "_BarRect", OBJPROP_HIDDEN, !show);
        ObjectSetInteger(0, MEMENTO_OBJ_PREFIX + sym + "_BarLabel", OBJPROP_HIDDEN, !show);
    }
}

void CVisualManager::InitDashboard()
{
    if(!m_settings.enable_dashboard) return;
    
    StringSplit(m_settings.symbols_list, ',', m_symbols_list);
    int total_symbols = ArraySize(m_symbols_list);
    if(total_symbols == 0) return;
    
    ArrayResize(m_panel_boxes, total_symbols);
    ArrayResize(m_dashboard_data, total_symbols);
    
    int current_x = DASHBOARD_X_GAP;
    
    color main_bg_color = C'26,30,38';      
    color main_border_color = C'55,65,81';  
    color sub_bg_color = C'17,20,25';       
    color text_color_bright = clrWhite;     
    color text_color_dim = clrSilver;       

    ObjectCreate(0, m_chart_button_name, OBJ_BUTTON, 0, 0, 0);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_XDISTANCE, current_x);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_YDISTANCE, DASHBOARD_Y_POS);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_XSIZE, 25);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_YSIZE, BOX_HEIGHT);
    ObjectSetString(0, m_chart_button_name, OBJPROP_TEXT, "📈");
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_BGCOLOR, main_bg_color);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_BORDER_COLOR, main_border_color);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_FONTSIZE, 12);
    ObjectSetInteger(0, m_chart_button_name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    
    current_x += 25 + DASHBOARD_X_GAP;

    for(int i = 0; i < total_symbols; i++)
    {
        string sym = m_symbols_list[i];
        StringTrimLeft(sym); StringTrimRight(sym);
        
        string base_name = MEMENTO_OBJ_PREFIX + sym;
        m_panel_boxes[i].MainBoxName      = base_name + "_MainBox";
        m_panel_boxes[i].SymbolLabelName  = base_name + "_SymbolLabel";
        m_panel_boxes[i].SubPanelName     = base_name + "_SubPanel";
        m_panel_boxes[i].TradesLabelName  = base_name + "_TradesLabel";
        m_panel_boxes[i].PlLabelName      = base_name + "_PlLabel";

        ObjectCreate(0, m_panel_boxes[i].MainBoxName, OBJ_RECTANGLE_LABEL, 0, 0, 0);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_XDISTANCE, current_x);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_YDISTANCE, DASHBOARD_Y_POS);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_XSIZE, BOX_WIDTH);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_YSIZE, BOX_HEIGHT);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_COLOR, main_border_color);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_BGCOLOR, main_bg_color);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_CORNER, CORNER_LEFT_UPPER);
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_ZORDER, 100);

        ObjectCreate(0, m_panel_boxes[i].SymbolLabelName, OBJ_LABEL, 0, 0, 0);
        ObjectSetString(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_TEXT, sym);
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_XDISTANCE, current_x + BOX_WIDTH / 2);
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_YDISTANCE, DASHBOARD_Y_POS + BOX_HEIGHT / 2);
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_COLOR, text_color_bright);
        ObjectSetString(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_FONT, "Calibri");
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_FONTSIZE, 12);
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_ANCHOR, ANCHOR_CENTER);
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_ZORDER, 101);

        ObjectCreate(0, m_panel_boxes[i].SubPanelName, OBJ_RECTANGLE_LABEL, 0, 0, 0);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_XDISTANCE, current_x);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_YDISTANCE, DASHBOARD_Y_POS + BOX_HEIGHT);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_XSIZE, BOX_WIDTH);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_YSIZE, SUB_PANEL_HEIGHT);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_COLOR, main_border_color);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_BGCOLOR, sub_bg_color);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_CORNER, CORNER_LEFT_UPPER);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_ZORDER, 99);
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_HIDDEN, true);

        ObjectCreate(0, m_panel_boxes[i].TradesLabelName, OBJ_LABEL, 0, 0, 0);
        ObjectSetString(0, m_panel_boxes[i].TradesLabelName, OBJPROP_TEXT, "Trades: 0");
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_XDISTANCE, current_x + 5);
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_YDISTANCE, DASHBOARD_Y_POS + BOX_HEIGHT + 10);
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_COLOR, text_color_dim);
        ObjectSetString(0, m_panel_boxes[i].TradesLabelName, OBJPROP_FONT, "Calibri");
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_FONTSIZE, 8);
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_ANCHOR, ANCHOR_LEFT);
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_HIDDEN, true);

        ObjectCreate(0, m_panel_boxes[i].PlLabelName, OBJ_LABEL, 0, 0, 0);
        ObjectSetString(0, m_panel_boxes[i].PlLabelName, OBJPROP_TEXT, "P/L: 0.0");
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_XDISTANCE, current_x + 5);
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_YDISTANCE, DASHBOARD_Y_POS + BOX_HEIGHT + 22);
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_COLOR, text_color_dim);
        ObjectSetString(0, m_panel_boxes[i].PlLabelName, OBJPROP_FONT, "Calibri");
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_FONTSIZE, 8);
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_ANCHOR, ANCHOR_LEFT);
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_HIDDEN, true);
        
        current_x += BOX_WIDTH + DASHBOARD_X_GAP;
        
        if(!HistorySelect(0, TimeCurrent())) continue;
        int trades_count = 0;
        double cumulative_pl = 0;
        uint total_deals = HistoryDealsTotal();
        for(uint j = 0; j < total_deals; j++) {
            ulong ticket = HistoryDealGetTicket(j);
            if(HistoryDealGetString(ticket, DEAL_SYMBOL) == sym && HistoryDealGetInteger(ticket, DEAL_MAGIC) == (long)m_settings.magic_number && HistoryDealGetInteger(ticket, DEAL_ENTRY) == DEAL_ENTRY_OUT) {
                trades_count++;
                cumulative_pl += HistoryDealGetDouble(ticket, DEAL_PROFIT) + HistoryDealGetDouble(ticket, DEAL_SWAP) + HistoryDealGetDouble(ticket, DEAL_COMMISSION);
            }
        }
        m_dashboard_data[i].trades_count = trades_count;
        m_dashboard_data[i].cumulative_pl = cumulative_pl;
    }
    
    int chart_panel_y = DASHBOARD_Y_POS + BOX_HEIGHT + SUB_PANEL_HEIGHT + 10;
    int chart_panel_width = (BOX_WIDTH + DASHBOARD_X_GAP) * total_symbols + 25;
    int chart_panel_height = 25 + (20 * total_symbols);
    
    ObjectCreate(0, m_chart_panel_bg_name, OBJ_RECTANGLE_LABEL, 0, 0, 0);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_XDISTANCE, DASHBOARD_X_GAP);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_YDISTANCE, chart_panel_y);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_XSIZE, chart_panel_width);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_YSIZE, chart_panel_height);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_BGCOLOR, sub_bg_color);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_COLOR, main_border_color);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
    ObjectSetInteger(0, m_chart_panel_bg_name, OBJPROP_ZORDER, 90);

    ObjectCreate(0, m_chart_panel_title_name, OBJ_LABEL, 0, 0, 0);
    ObjectSetString(0, m_chart_panel_title_name, OBJPROP_TEXT, "P/L Distribution");
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_XDISTANCE, DASHBOARD_X_GAP + chart_panel_width/2);
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_YDISTANCE, chart_panel_y + 12);
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_COLOR, text_color_bright);
    ObjectSetString(0, m_chart_panel_title_name, OBJPROP_FONT, "Calibri");
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_FONTSIZE, 12);
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_ANCHOR, ANCHOR_CENTER);
    ObjectSetInteger(0, m_chart_panel_title_name, OBJPROP_ZORDER, 91);
    
    for(int i=0; i < total_symbols; i++) {
        string sym = m_symbols_list[i];
        ObjectCreate(0, MEMENTO_OBJ_PREFIX + sym + "_BarRect", OBJ_RECTANGLE_LABEL, 0, 0, 0);
        ObjectCreate(0, MEMENTO_OBJ_PREFIX + sym + "_BarLabel", OBJ_LABEL, 0, 0, 0);
    }
    ShowBarChart(false);
    ChartRedraw(0);
}

void CVisualManager::UpdateDashboard()
{
    if(!m_settings.enable_dashboard || ArraySize(m_symbols_list) == 0) return;
    
    int total_symbols = ArraySize(m_symbols_list);
    int current_x = DASHBOARD_X_GAP + 25 + DASHBOARD_X_GAP;

    for(int i = 0; i < total_symbols; i++)
    {
        string sym = m_symbols_list[i];
        long magic = (long)m_settings.magic_number;
        color box_color = C'26,30,38';
        color text_color = clrWhite;

        if(PositionSelect(sym) && PositionGetInteger(POSITION_MAGIC) == magic) {
            if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) {
                box_color = m_settings.bullish_color;
                text_color = clrBlack;
            } else if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) {
                box_color = m_settings.bearish_color;
                text_color = clrWhite;
            }
        }
        ObjectSetInteger(0, m_panel_boxes[i].MainBoxName, OBJPROP_BGCOLOR, box_color);
        ObjectSetInteger(0, m_panel_boxes[i].SymbolLabelName, OBJPROP_COLOR, text_color);
        
        int trades_count = m_dashboard_data[i].trades_count;
        double cumulative_pl = m_dashboard_data[i].cumulative_pl;
        bool show_sub_panel = trades_count > 0;
        ObjectSetInteger(0, m_panel_boxes[i].SubPanelName, OBJPROP_HIDDEN, !show_sub_panel);
        ObjectSetInteger(0, m_panel_boxes[i].TradesLabelName, OBJPROP_HIDDEN, !show_sub_panel);
        ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_HIDDEN, !show_sub_panel);
        
        if(show_sub_panel) {
            ObjectSetString(0, m_panel_boxes[i].TradesLabelName, OBJPROP_TEXT, "Trades: " + (string)trades_count);
            ObjectSetString(0, m_panel_boxes[i].PlLabelName, OBJPROP_TEXT, "P/L: " + DoubleToString(cumulative_pl, 2));
            ObjectSetInteger(0, m_panel_boxes[i].PlLabelName, OBJPROP_COLOR, cumulative_pl >= 0 ? C'4,180,95' : C'240,82,90');
        }
        current_x += BOX_WIDTH + DASHBOARD_X_GAP;
    }
    
    if(m_is_barchart_visible)
    {
        double max_abs_pl = 0;
        for(int i=0; i < ArraySize(m_dashboard_data); i++)
        {
            if(MathAbs(m_dashboard_data[i].cumulative_pl) > max_abs_pl)
                max_abs_pl = MathAbs(m_dashboard_data[i].cumulative_pl);
        }
        if(max_abs_pl == 0) max_abs_pl = 1;

        int max_bar_width = BOX_WIDTH * 2;
        int current_y = DASHBOARD_Y_POS + BOX_HEIGHT + SUB_PANEL_HEIGHT + 10 + 30;

        for(int i=0; i < total_symbols; i++)
        {
            string sym = m_symbols_list[i];
            double pl = m_dashboard_data[i].cumulative_pl;
            string bar_rect_name = MEMENTO_OBJ_PREFIX + sym + "_BarRect";
            string bar_label_name = MEMENTO_OBJ_PREFIX + sym + "_BarLabel";
            
            int bar_width = (int)((MathAbs(pl) / max_abs_pl) * max_bar_width);
            color bar_color = (pl >= 0) ? C'4,180,95' : C'240,82,90';

            ObjectSetInteger(0, bar_rect_name, OBJPROP_XDISTANCE, DASHBOARD_X_GAP + 70);
            ObjectSetInteger(0, bar_rect_name, OBJPROP_YDISTANCE, current_y);
            ObjectSetInteger(0, bar_rect_name, OBJPROP_XSIZE, bar_width);
            ObjectSetInteger(0, bar_rect_name, OBJPROP_YSIZE, 15);
            ObjectSetInteger(0, bar_rect_name, OBJPROP_BGCOLOR, bar_color);
            ObjectSetInteger(0, bar_rect_name, OBJPROP_COLOR, C'55,65,81');
            ObjectSetInteger(0, bar_rect_name, OBJPROP_CORNER, CORNER_LEFT_UPPER);
            ObjectSetInteger(0, bar_rect_name, OBJPROP_ZORDER, 92);
            
            string label_text = StringFormat("%s : %.2f", sym, pl);
            ObjectSetString(0, bar_label_name, OBJPROP_TEXT, label_text);
            ObjectSetInteger(0, bar_label_name, OBJPROP_XDISTANCE, DASHBOARD_X_GAP + 65);
            ObjectSetInteger(0, bar_label_name, OBJPROP_YDISTANCE, current_y + 8);
            ObjectSetInteger(0, bar_label_name, OBJPROP_COLOR, clrSilver);
            ObjectSetString(0, bar_label_name, OBJPROP_FONT, "Calibri");
            ObjectSetInteger(0, bar_label_name, OBJPROP_FONTSIZE, 9);
            ObjectSetInteger(0, bar_label_name, OBJPROP_ANCHOR, ANCHOR_RIGHT);
            ObjectSetInteger(0, bar_label_name, OBJPROP_ZORDER, 93);
            
            current_y += 20;
        }
    }
    ChartRedraw(0);
}

// ✅✅✅ تابع بازنویسی شده برای رسم مستطیل و فلش کراس اولیه (ثابت) ✅✅✅
void CVisualManager::DrawTripleCrossRectangle(bool is_buy, int shift)
{
    string obj_name_rect = MEMENTO_OBJ_PREFIX + m_symbol + "_SignalRect_" + (string)iTime(m_symbol, _Period, shift);
    string obj_name_arrow = MEMENTO_OBJ_PREFIX + m_symbol + "_SignalArrow_" + (string)iTime(m_symbol, _Period, shift);
    
    ObjectDelete(0, obj_name_rect);
    ObjectDelete(0, obj_name_arrow);

    datetime time1 = iTime(m_symbol, _Period, shift + 1);
    datetime time2 = iTime(m_symbol, _Period, shift);
    double high = iHigh(m_symbol, _Period, shift); 
    double low = iLow(m_symbol, _Period, shift);
    double point = SymbolInfoDouble(m_symbol, SYMBOL_POINT);
    double buffer = 10 * point * m_settings.object_size_multiplier;
    
    // رسم مستطیل کراس
    if(ObjectCreate(0, obj_name_rect, OBJ_RECTANGLE, 0, time1, low - buffer, time2, high + buffer))
    {
        ObjectSetInteger(0, obj_name_rect, OBJPROP_COLOR, is_buy ? m_settings.bullish_color : m_settings.bearish_color);
        ObjectSetInteger(0, obj_name_rect, OBJPROP_STYLE, STYLE_SOLID); 
        ObjectSetInteger(0, obj_name_rect, OBJPROP_WIDTH, 1); 
        ObjectSetInteger(0, obj_name_rect, OBJPROP_BACK, true);
        ObjectSetInteger(0, obj_name_rect, OBJPROP_FILL, false);
        CreateManagedObject(obj_name_rect, (long)iBars(m_symbol, _Period));
    }
    
    // رسم فلش کراس (26 کندل قبل) با کدهای جدید و فاصله مناسب
    double arrow_offset = 5 * point * m_settings.object_size_multiplier;
    double price = is_buy ? low - arrow_offset : high + arrow_offset;
    uchar code = is_buy ? 211 : 212;
    
    if(ObjectCreate(0, obj_name_arrow, OBJ_ARROW, 0, iTime(m_symbol, _Period, shift), price))
    {
        ObjectSetInteger(0, obj_name_arrow, OBJPROP_ARROWCODE, code);
        ObjectSetString(0, obj_name_arrow, OBJPROP_FONT, "Wingdings");
        ObjectSetInteger(0, obj_name_arrow, OBJPROP_COLOR, is_buy ? clrGreen : clrRed); // ✅ رنگ‌های جدید
        ObjectSetInteger(0, obj_name_arrow, OBJPROP_WIDTH, (int)(2 * m_settings.object_size_multiplier)); 
        CreateManagedObject(obj_name_arrow, (long)iBars(m_symbol, _Period));
    }
}

// ✅✅✅ تابع بازنویسی شده برای رسم فلش تاییدیه نهایی (روی کندل 1) ✅✅✅
void CVisualManager::DrawConfirmationArrow(bool is_buy, int shift)
{
    string obj_name = MEMENTO_OBJ_PREFIX + m_symbol + "_ConfirmArrow_" + (string)iTime(m_symbol, _Period, shift);
    ObjectDelete(0, obj_name);
    
    double point = SymbolInfoDouble(m_symbol, SYMBOL_POINT);
    double offset = 15 * point * m_settings.object_size_multiplier; // فاصله اولیه
    double price = is_buy ? iLow(m_symbol, _Period, shift) - offset : iHigh(m_symbol, _Period, shift) + offset;
    
    // ✅ فاصله معقول از کندل رو محاسبه می‌کنیم
    double candle_range = MathAbs(iHigh(m_symbol, _Period, shift) - iLow(m_symbol, _Period, shift));
    double final_offset = candle_range * 0.5; // مثلا نصف کندل فاصله بده
    price = is_buy ? iLow(m_symbol, _Period, shift) - final_offset : iHigh(m_symbol, _Period, shift) + final_offset;
    
    // ✅ استفاده از کد جدید ۱۸۱
    uchar code = 181;
    color arrow_color = is_buy ? m_settings.bullish_color : m_settings.bearish_color;

    if(ObjectCreate(0, obj_name, OBJ_ARROW, 0, iTime(m_symbol, _Period, shift), price))
    {
        ObjectSetInteger(0, obj_name, OBJPROP_ARROWCODE, code);
        ObjectSetString(0, obj_name, OBJPROP_FONT, "Wingdings");
        ObjectSetInteger(0, obj_name, OBJPROP_COLOR, arrow_color);
        ObjectSetInteger(0, obj_name, OBJPROP_WIDTH, (int)(5 * m_settings.object_size_multiplier));
        CreateManagedObject(obj_name, (long)iBars(m_symbol, _Period));
    }
}

// ✅✅✅ تابع بازنویسی شده برای رسم ناحیه اسکن متحرک ✅✅✅
void CVisualManager::DrawScanningArea(bool is_buy, int start_shift, int current_shift)
{
    string rect_name = MEMENTO_OBJ_PREFIX + m_symbol + "_ScanningRect";
    
    ObjectDelete(0, rect_name);
    
    if (current_shift < 1 || current_shift > start_shift) return;

    double max_high = 0;
    double min_low = 999999;
    
    MqlRates rates[];
    int bars_to_copy = start_shift - current_shift + 1;
    if(CopyRates(m_symbol, _Period, current_shift, bars_to_copy, rates) > 0)
    {
        for(int i = 0; i < ArraySize(rates); i++)
        {
            if(rates[i].high > max_high) max_high = rates[i].high;
            if(rates[i].low < min_low) min_low = rates[i].low;
        }
    }

    if(max_high > 0 && min_low < 999999)
    {
        datetime time_start_rect = iTime(m_symbol, _Period, start_shift);
        datetime time_end_rect = iTime(m_symbol, _Period, current_shift);
        
        if(ObjectCreate(0, rect_name, OBJ_RECTANGLE, 0, time_start_rect, min_low, time_end_rect, max_high))
        {
            color scan_color = is_buy ? clrLightSkyBlue : clrPaleGoldenrod;
            ObjectSetInteger(0, rect_name, OBJPROP_COLOR, scan_color);
            ObjectSetInteger(0, rect_name, OBJPROP_STYLE, STYLE_SOLID); 
            ObjectSetInteger(0, rect_name, OBJPROP_WIDTH, 1); 
            ObjectSetInteger(0, rect_name, OBJPROP_BACK, true);
            ObjectSetInteger(0, rect_name, OBJPROP_FILL, true);
            ObjectSetInteger(0, rect_name, OBJPROP_SELECTABLE, false);
            
           
            
            CreateManagedObject(rect_name, (long)iBars(m_symbol, _Period));
        }
    }
}


void CVisualManager::CleanupOldObjects(const int max_age_in_bars)
{
    if (max_age_in_bars <= 0) return;
    long current_bar_count = (long)iBars(m_symbol, _Period);
    for (int i = ArraySize(m_managed_objects) - 1; i >= 0; i--)
    {
        if (current_bar_count - m_managed_objects[i].CreationBar >= max_age_in_bars)
        {
            ObjectDelete(0, m_managed_objects[i].ObjectName);
            ArrayRemove(m_managed_objects, i, 1);
        }
    }
}

int CVisualManager::GetSymbolIndex(string symbol)
{
    for(int i = 0; i < ArraySize(m_symbols_list); i++)
    {
        if(m_symbols_list[i] == symbol) return i;
    }
    return -1;
}

void CVisualManager::UpdateDashboardCache(int symbol_index, double deal_profit, double deal_commission, double deal_swap)
{
    if(symbol_index >= 0 && symbol_index < ArraySize(m_dashboard_data))
    {
        m_dashboard_data[symbol_index].trades_count++;
        m_dashboard_data[symbol_index].cumulative_pl += deal_profit + deal_commission + deal_swap;
    }
}

void CVisualManager::CreateManagedObject(string obj_name, long creation_bar)
{
    int total = ArraySize(m_managed_objects);
    ArrayResize(m_managed_objects, total + 1);
    m_managed_objects[total].ObjectName = obj_name;
    m_managed_objects[total].CreationBar = creation_bar;
}



_____________________________________________________________________________________________________________________________





//+------------------------------------------------------------------+
//|                                      Universal Trailing Stop Loss Library |
//|                                      File: TrailingStopManager.mqh |
//|                                      Version: 5.1 (Truly Final) |
//|                                      © 2025, Mohammad & Gemini |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "© 2025, hipoalgoritm"
#property link      "https://www.mql5.com"
#property version   "5.1"
#include <Trade\Trade.mqh>

//================================================================================//
//|                                 --- راهنمای استفاده سریع ---                   |
//|                                                                                |
//| ۱. این فایل را در کنار فایل اکسپرت خود قرار دهید.                                |
//| ۲. در فایل اکسپرت اصلی (.mq5)، این دو خط را به بالای فایل اضافه کنید:             |
//|    #include "TrailingStopManager.mqh"                                          |
//|    CTrailingStopManager TrailingStop;                                          |
//| ۳. در انتهای تابع OnInit اکسپرت خود، این خط را اضافه کنید:                      |
//|    TrailingStop.Init(magic_number);                                           |
//| ۴. در انتهای تابع OnTimer (یا OnTick) اکسپرت خود، این خط را اضافه کنید:          |
//|    TrailingStop.Process();                                                     |
//|                                                                                |
//|                                 **دیگر به هیچ فراخوانی دیگری نیاز نیست!** |
//|                                                                                |
//================================================================================//

//================================================================//
// بخش تنظیمات ورودی (Inputs) - کاملا مستقل و Plug & Play
//================================================================//
input group "---=== 🛡️ Universal Trailing & Breakeven 🛡️ ===---";
input bool Inp_TSL_Enable = true;
input double Inp_TSL_Activation_RR = 1.0;
input bool Inp_BE_Enable = true;
input double Inp_BE_Activation_RR = 1.0;
input double Inp_BE_Plus_Pips = 1.0;
enum E_TSL_Mode { TSL_MODE_TENKAN, TSL_MODE_KIJUN, TSL_MODE_MA, TSL_MODE_ATR, TSL_MODE_PSAR, TSL_MODE_PRICE_CHANNEL, TSL_MODE_CHANDELIER_ATR };
input E_TSL_Mode Inp_TSL_Mode = TSL_MODE_TENKAN;
/*input*/ double Inp_TSL_Buffer_Pips = 3.0;
/*input*/ int Inp_TSL_Ichimoku_Tenkan = 9;
/*input*/ int Inp_TSL_Ichimoku_Kijun = 26;
/*input*/ int Inp_TSL_Ichimoku_Senkou = 52;
/*input*/ int Inp_TSL_MA_Period = 50;
/*input*/ ENUM_MA_METHOD Inp_TSL_MA_Method = MODE_SMA;
/*input*/ ENUM_APPLIED_PRICE Inp_TSL_MA_Price = PRICE_CLOSE;
/*input*/ int Inp_TSL_ATR_Period = 14;
/*input*/ double Inp_TSL_ATR_Multiplier = 2.5;
/*input*/ double Inp_TSL_PSAR_Step = 0.02;
/*input*/ double Inp_TSL_PSAR_Max = 0.2;
/*input*/ int Inp_TSL_PriceChannel_Period = 22;

//+------------------------------------------------------------------+
//| ساختارهای داخلی برای مدیریت بهینه هندل‌ها و وضعیت تریدها          |
//+------------------------------------------------------------------+
struct SIndicatorHandle
{
  string symbol;
  int    handle;
};

struct STradeState
{
  ulong  ticket;
  double open_price;
  double initial_sl;
  bool   be_applied;
};

//+------------------------------------------------------------------+
//| کلاس اصلی مدیریت حد ضرر متحرک                                     |
//+------------------------------------------------------------------+
class CTrailingStopManager
{
private:
  long               m_magic_number;
  bool               m_is_initialized;
  CTrade             m_trade;

  // --- تنظیمات ---
  bool               m_tsl_enabled, m_be_enabled;
  double             m_activation_rr, m_be_activation_rr, m_be_plus_pips;
  E_TSL_Mode         m_tsl_mode;
  double             m_buffer_pips;
  int                m_ichimoku_tenkan, m_ichimoku_kijun, m_ichimoku_senkou;
  int                m_ma_period;
  ENUM_MA_METHOD     m_ma_method;
  ENUM_APPLIED_PRICE m_ma_price;
  int                m_atr_period;
  double             m_atr_multiplier;
  double             m_psar_step, m_psar_max;
  int                m_pricechannel_period;

  // --- مدیریت حالت ---
  STradeState        m_trade_states[];

  // --- مدیریت هندل‌ها ---
  SIndicatorHandle   m_ichimoku_handles[];
  SIndicatorHandle   m_ma_handles[];
  SIndicatorHandle   m_atr_handles[];
  SIndicatorHandle   m_psar_handles[];

  // --- توابع کمکی خصوصی ---
  int    GetIchimokuHandle(string symbol);
  int    GetMaHandle(string symbol);
  int    GetAtrHandle(string symbol);
  int    GetPsarHandle(string symbol);
  void   Log(string message);
  void   ManageSingleTrade(ulong ticket);
  int    FindTradeStateIndex(ulong ticket);
  void   AddTradeState(ulong ticket, double open_price, double initial_sl);
  void   CleanupTradeStates();

  double CalculateIchimokuSL(string symbol, ENUM_POSITION_TYPE type);
  double CalculateMaSL(string symbol, ENUM_POSITION_TYPE type);
  double CalculateAtrSL(string symbol, ENUM_POSITION_TYPE type);
  double CalculatePsarSL(string symbol, ENUM_POSITION_TYPE type);
  double CalculatePriceChannelSL(string symbol, ENUM_POSITION_TYPE type);
  double CalculateChandelierAtrSL(string symbol, ENUM_POSITION_TYPE type);
  void   ManageBreakeven(int state_idx);

public:
  CTrailingStopManager() { m_magic_number = 0; m_is_initialized = false; }
  ~CTrailingStopManager();
  void Init(long magic_number);
  void Process();
};

// --- مخرب کلاس ---
CTrailingStopManager::~CTrailingStopManager()
{
  for(int i = 0; i < ArraySize(m_ichimoku_handles); i++) IndicatorRelease(m_ichimoku_handles[i].handle);
  for(int i = 0; i < ArraySize(m_ma_handles); i++) IndicatorRelease(m_ma_handles[i].handle);
  for(int i = 0; i < ArraySize(m_atr_handles); i++) IndicatorRelease(m_atr_handles[i].handle);
  for(int i = 0; i < ArraySize(m_psar_handles); i++) IndicatorRelease(m_psar_handles[i].handle);
}

// --- تابع مقداردهی اولیه ---
void CTrailingStopManager::Init(long magic_number)
{
  if(m_is_initialized) return;
  m_magic_number = magic_number;
  m_trade.SetExpertMagicNumber(m_magic_number);
  m_trade.SetAsyncMode(true);
  m_tsl_enabled = Inp_TSL_Enable;
  m_activation_rr = Inp_TSL_Activation_RR > 0 ? Inp_TSL_Activation_RR : 1.0;
  m_be_enabled = Inp_BE_Enable;
  m_be_activation_rr = Inp_BE_Activation_RR > 0 ? Inp_BE_Activation_RR : 1.0;
  m_be_plus_pips = Inp_BE_Plus_Pips;
  m_tsl_mode = Inp_TSL_Mode;
  m_buffer_pips = Inp_TSL_Buffer_Pips;
  m_ichimoku_tenkan = Inp_TSL_Ichimoku_Tenkan;
  m_ichimoku_kijun = Inp_TSL_Ichimoku_Kijun;
  m_ichimoku_senkou = Inp_TSL_Ichimoku_Senkou;
  m_ma_period = Inp_TSL_MA_Period;
  m_ma_method = Inp_TSL_MA_Method;
  m_ma_price = Inp_TSL_MA_Price;
  m_atr_period = Inp_TSL_ATR_Period;
  m_atr_multiplier = Inp_TSL_ATR_Multiplier;
  m_psar_step = Inp_TSL_PSAR_Step;
  m_psar_max = Inp_TSL_PSAR_Max;
  m_pricechannel_period = Inp_TSL_PriceChannel_Period;
  if(m_tsl_enabled || m_be_enabled) Log("کتابخانه Universal Trailing/BE با موفقیت برای مجیک نامبر " + (string)m_magic_number + " فعال شد.");
  m_is_initialized = true;
}

// ✅✅✅ تابع اصلی پردازش (منطق کاملاً مستقل) ✅✅✅
void CTrailingStopManager::Process()
{
  if(!m_is_initialized || (!m_tsl_enabled && !m_be_enabled)) return;

  // گام ۱: پوزیشن‌های جدید را به لیست اضافه کن.
  int positions_total = PositionsTotal();
  for(int i = 0; i < positions_total; i++)
  {
      ulong ticket = PositionGetTicket(i);
      if(PositionGetInteger(POSITION_MAGIC) != m_magic_number) continue;

      int state_idx = FindTradeStateIndex(ticket);

      if(state_idx == -1)
      {
          if(PositionSelectByTicket(ticket))
          {
              AddTradeState(ticket, PositionGetDouble(POSITION_PRICE_OPEN), PositionGetDouble(POSITION_SL));
          }
      }
  }

  // ✅✅✅ گام ۲: پاکسازی لیست از پوزیشن‌های بسته شده ✅✅✅
  CleanupTradeStates();

  // گام ۳: منطق تریلینگ و سربه‌سر را برای هر پوزیشن در لیست اجرا کن.
  for(int i = 0; i < ArraySize(m_trade_states); i++)
  {
    ManageSingleTrade(m_trade_states[i].ticket);
  }
}

// ✅✅✅ تابع جدید: پاکسازی حالت‌های ترید ✅✅✅
void CTrailingStopManager::CleanupTradeStates()
{
    for(int i = ArraySize(m_trade_states) - 1; i >= 0; i--)
    {
        ulong ticket = m_trade_states[i].ticket;
        // اگر پوزیشن با این تیکت پیدا نشد یا مجیک نامبرش فرق داشت، یعنی بسته شده.
        if(!PositionSelectByTicket(ticket) || PositionGetInteger(POSITION_MAGIC) != m_magic_number)
        {
            ArrayRemove(m_trade_states, i, 1);
            Log("حالت تیکت " + (string)ticket + " از لیست تریلینگ حذف شد.");
        }
    }
}


// ... بقیه توابع کلاس CTrailingStopManager (بدون تغییر) ...
void CTrailingStopManager::ManageSingleTrade(ulong ticket)
{
    if(!PositionSelectByTicket(ticket)) return;

    int state_idx = FindTradeStateIndex(ticket);
    if (state_idx == -1) return;

    double initial_sl = m_trade_states[state_idx].initial_sl;
    
    if (initial_sl == 0)
    {
        double current_sl_from_position = PositionGetDouble(POSITION_SL);
        if (current_sl_from_position > 0)
        {
            m_trade_states[state_idx].initial_sl = current_sl_from_position;
            initial_sl = current_sl_from_position;
            Log("SL اولیه برای تیکت " + (string)ticket + " با موفقیت به‌روزرسانی شد: " + (string)initial_sl);
        }
        else
        {
            return;
        }
    }
    
    if(m_be_enabled) ManageBreakeven(state_idx);

    if(!m_tsl_enabled) return;

    string symbol = PositionGetString(POSITION_SYMBOL);
    ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);
    double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
    double initial_risk = MathAbs(open_price - initial_sl);
    if(initial_risk == 0) return;

    double required_profit_for_tsl = initial_risk * m_activation_rr;
    double current_price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(symbol, SYMBOL_BID) : SymbolInfoDouble(symbol, SYMBOL_ASK);
    double current_profit = (type == POSITION_TYPE_BUY) ? (current_price - open_price) : (open_price - current_price);
    
    if(current_profit < required_profit_for_tsl) return;
    
    double new_sl_level = 0;
    switch(m_tsl_mode)
    {
    case TSL_MODE_TENKAN:
    case TSL_MODE_KIJUN:
        new_sl_level = CalculateIchimokuSL(symbol, type);
        break;
    case TSL_MODE_MA:
        new_sl_level = CalculateMaSL(symbol, type);
        break;
    case TSL_MODE_ATR:
        new_sl_level = CalculateAtrSL(symbol, type);
        break;
    case TSL_MODE_PSAR:
        new_sl_level = CalculatePsarSL(symbol, type);
        break;
    case TSL_MODE_PRICE_CHANNEL:
        new_sl_level = CalculatePriceChannelSL(symbol, type);
        break;
    case TSL_MODE_CHANDELIER_ATR:
        new_sl_level = CalculateChandelierAtrSL(symbol, type);
        break;
    }
    if(new_sl_level == 0) return;
    
    double final_new_sl = new_sl_level;
    if(m_tsl_mode == TSL_MODE_TENKAN || m_tsl_mode == TSL_MODE_KIJUN || m_tsl_mode == TSL_MODE_MA)
    {
        double point = SymbolInfoDouble(symbol, SYMBOL_POINT);
        double pips_to_points_multiplier = (SymbolInfoInteger(symbol, SYMBOL_DIGITS) == 3 || SymbolInfoInteger(symbol, SYMBOL_DIGITS) == 5) ? 10.0 : 1.0;
        double buffer_points = m_buffer_pips * point * pips_to_points_multiplier;
        if(type == POSITION_TYPE_BUY) final_new_sl -= buffer_points;
        else final_new_sl += buffer_points;
    }
    
    int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
    final_new_sl = NormalizeDouble(final_new_sl, digits);
    double current_sl = PositionGetDouble(POSITION_SL);

    bool should_modify = false;
    if(type == POSITION_TYPE_BUY)
    {
        if(final_new_sl > current_sl && final_new_sl < current_price) should_modify = true;
    }
    else
    {
        if(final_new_sl < current_sl && final_new_sl > current_price) should_modify = true;
    }

    if(should_modify)
    {
        if(m_trade.PositionModify(ticket, final_new_sl, PositionGetDouble(POSITION_TP)))
        {
            Log("تریلینگ استاپ برای تیکت " + (string)ticket + " به قیمت " + DoubleToString(final_new_sl, digits) + " آپدیت شد.");
        }
        else
        {
            Log("خطا در آپدیت تریلینگ استاپ برای تیکت " + (string)ticket + ". کد: " + (string)m_trade.ResultRetcode() + " | " + m_trade.ResultComment());
        }
    }
}
void CTrailingStopManager::ManageBreakeven(int state_idx)
{
    if(m_trade_states[state_idx].be_applied) return;
    ulong ticket = m_trade_states[state_idx].ticket;
    if(!PositionSelectByTicket(ticket)) return;
    string symbol = PositionGetString(POSITION_SYMBOL);
    ENUM_POSITION_TYPE type = (ENUM_POSITION_TYPE)PositionGetInteger(POSITION_TYPE);

    double initial_sl = m_trade_states[state_idx].initial_sl;
    if(initial_sl == 0) return;
    double open_price = PositionGetDouble(POSITION_PRICE_OPEN);
    double initial_risk = MathAbs(open_price - initial_sl);
    if(initial_risk == 0) return;
    double required_profit_for_be = initial_risk * m_be_activation_rr;
    double current_price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(symbol, SYMBOL_BID) : SymbolInfoDouble(symbol, SYMBOL_ASK);
    double current_profit = (type == POSITION_TYPE_BUY) ? (current_price - open_price) : (open_price - current_price);

    if(current_profit >= required_profit_for_be)
    {
        double point = SymbolInfoDouble(symbol, SYMBOL_POINT);
        double pips_to_points_multiplier = (SymbolInfoInteger(symbol, SYMBOL_DIGITS) == 3 || SymbolInfoInteger(symbol, SYMBOL_DIGITS) == 5) ? 10.0 : 1.0;
        double be_offset = m_be_plus_pips * point * pips_to_points_multiplier;
        double new_sl = (type == POSITION_TYPE_BUY) ? open_price + be_offset : open_price - be_offset;
        int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
        new_sl = NormalizeDouble(new_sl, digits);

        if( (type == POSITION_TYPE_BUY && new_sl > PositionGetDouble(POSITION_SL)) ||
            (type == POSITION_TYPE_SELL && new_sl < PositionGetDouble(POSITION_SL)) )
        {
            if(m_trade.PositionModify(ticket, new_sl, PositionGetDouble(POSITION_TP)))
            {
                Log("معامله تیکت " + (string)ticket + " با موفقیت سربه‌سر (Breakeven) شد.");
                m_trade_states[state_idx].be_applied = true;
            }
        }
    }
}
int CTrailingStopManager::FindTradeStateIndex(ulong ticket)
{
    for(int i = 0; i < ArraySize(m_trade_states); i++)
    {
        if(m_trade_states[i].ticket == ticket) return i;
    }
    return -1;
}
void CTrailingStopManager::AddTradeState(ulong ticket, double open_price, double initial_sl)
{
    int idx = FindTradeStateIndex(ticket);
    if(idx != -1) return;
    
    int new_idx = ArraySize(m_trade_states);
    ArrayResize(m_trade_states, new_idx + 1);
    m_trade_states[new_idx].ticket = ticket;
    m_trade_states[new_idx].open_price = open_price;
    m_trade_states[new_idx].initial_sl = initial_sl;
    m_trade_states[new_idx].be_applied = false;
    Log("حالت جدید برای تیکت " + (string)ticket + " با SL اولیه " + (string)initial_sl + " اضافه شد.");
}
int CTrailingStopManager::GetIchimokuHandle(string symbol)
{
  for(int i=0; i<ArraySize(m_ichimoku_handles); i++) if(m_ichimoku_handles[i].symbol==symbol) return m_ichimoku_handles[i].handle;
  int handle = iIchimoku(symbol, _Period, m_ichimoku_tenkan, m_ichimoku_kijun, m_ichimoku_senkou);
  if(handle!=INVALID_HANDLE){int n=ArraySize(m_ichimoku_handles); ArrayResize(m_ichimoku_handles,n+1); m_ichimoku_handles[n].symbol=symbol; m_ichimoku_handles[n].handle=handle;}
  return handle;
}
int CTrailingStopManager::GetMaHandle(string symbol)
{
  for(int i=0; i<ArraySize(m_ma_handles); i++) if(m_ma_handles[i].symbol==symbol) return m_ma_handles[i].handle;
  int handle = iMA(symbol, _Period, m_ma_period, 0, m_ma_method, m_ma_price);
  if(handle!=INVALID_HANDLE){int n=ArraySize(m_ma_handles); ArrayResize(m_ma_handles,n+1); m_ma_handles[n].symbol=symbol; m_ma_handles[n].handle=handle;}
  return handle;
}
int CTrailingStopManager::GetAtrHandle(string symbol)
{
  for(int i=0; i<ArraySize(m_atr_handles); i++) if(m_atr_handles[i].symbol==symbol) return m_atr_handles[i].handle;
  int handle = iATR(symbol, _Period, m_atr_period);
  if(handle!=INVALID_HANDLE){int n=ArraySize(m_atr_handles); ArrayResize(m_atr_handles,n+1); m_atr_handles[n].symbol=symbol; m_atr_handles[n].handle=handle;}
  return handle;
}
int CTrailingStopManager::GetPsarHandle(string symbol)
{
  for(int i=0; i<ArraySize(m_psar_handles); i++) if(m_psar_handles[i].symbol==symbol) return m_psar_handles[i].handle;
  int handle = iSAR(symbol, _Period, m_psar_step, m_psar_max);
  if(handle!=INVALID_HANDLE){int n=ArraySize(m_psar_handles); ArrayResize(m_psar_handles,n+1); m_psar_handles[n].symbol=symbol; m_psar_handles[n].handle=handle;}
  return handle;
}
void CTrailingStopManager::Log(string message)
{
  if (m_magic_number > 0) Print("TSL Manager [", (string)m_magic_number, "]: ", message);
}
double CTrailingStopManager::CalculateIchimokuSL(string symbol, ENUM_POSITION_TYPE type)
{
  int handle = GetIchimokuHandle(symbol);
  if(handle == INVALID_HANDLE) return 0.0;
  int buffer_idx = (m_tsl_mode == TSL_MODE_TENKAN) ? 0 : 1;
  double values[1];
  if(CopyBuffer(handle, buffer_idx, 1, 1, values) < 1) return 0.0;
  double line_value = values[0];
  double current_price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(symbol, SYMBOL_BID) : SymbolInfoDouble(symbol, SYMBOL_ASK);
  if (type == POSITION_TYPE_BUY && line_value > current_price) return 0.0;
  if (type == POSITION_TYPE_SELL && line_value < current_price) return 0.0;
  return line_value;
}
double CTrailingStopManager::CalculateMaSL(string symbol, ENUM_POSITION_TYPE type)
{
  int handle = GetMaHandle(symbol);
  if(handle == INVALID_HANDLE) return 0.0;
  double values[1];
  if(CopyBuffer(handle, 0, 1, 1, values) < 1) return 0.0;
  double ma_value = values[0];
  double current_price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(symbol, SYMBOL_BID) : SymbolInfoDouble(symbol, SYMBOL_ASK);
  if (type == POSITION_TYPE_BUY && ma_value > current_price) return 0.0;
  if (type == POSITION_TYPE_SELL && ma_value < current_price) return 0.0;
  return ma_value;
}
double CTrailingStopManager::CalculateAtrSL(string symbol, ENUM_POSITION_TYPE type)
{
  int handle = GetAtrHandle(symbol);
  if(handle == INVALID_HANDLE) return 0.0;
  double values[1];
  if(CopyBuffer(handle, 0, 1, 1, values) < 1) return 0.0;
  double atr_offset = values[0] * m_atr_multiplier;
  double current_price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(symbol, SYMBOL_BID) : SymbolInfoDouble(symbol, SYMBOL_ASK);
  if(type == POSITION_TYPE_BUY) return current_price - atr_offset;
  else return current_price + atr_offset;
}
double CTrailingStopManager::CalculatePsarSL(string symbol, ENUM_POSITION_TYPE type)
{
  int handle = GetPsarHandle(symbol);
  if(handle == INVALID_HANDLE) return 0.0;
  double values[1];
  if(CopyBuffer(handle, 0, 1, 1, values) < 1) return 0.0;
  double psar_value = values[0];
  double current_price = (type == POSITION_TYPE_BUY) ? SymbolInfoDouble(symbol, SYMBOL_BID) : SymbolInfoDouble(symbol, SYMBOL_ASK);
  if (type == POSITION_TYPE_BUY && psar_value > current_price) return 0.0;
  if (type == POSITION_TYPE_SELL && psar_value < current_price) return 0.0;
  return psar_value;
}
double CTrailingStopManager::CalculatePriceChannelSL(string symbol, ENUM_POSITION_TYPE type)
{
  double values[];
  if(type == POSITION_TYPE_BUY)
  {
      if(CopyLow(symbol, _Period, 1, m_pricechannel_period, values) < m_pricechannel_period) return 0.0;
      return values[ArrayMinimum(values, 0, m_pricechannel_period)];
  }
  else
  {
      if(CopyHigh(symbol, _Period, 1, m_pricechannel_period, values) < m_pricechannel_period) return 0.0;
      return values[ArrayMaximum(values, 0, m_pricechannel_period)];
  }
}
double CTrailingStopManager::CalculateChandelierAtrSL(string symbol, ENUM_POSITION_TYPE type)
{
  int atr_handle = GetAtrHandle(symbol);
  if(atr_handle == INVALID_HANDLE) return 0.0;
  double atr_values[1];
  if(CopyBuffer(atr_handle, 0, 1, 1, atr_values) < 1) return 0.0;
  double atr_offset = atr_values[0] * m_atr_multiplier;
  double price_channel_values[];
  if(type == POSITION_TYPE_BUY)
  {
      if(CopyHigh(symbol, _Period, 1, m_pricechannel_period, price_channel_values) < m_pricechannel_period) return 0.0;
      double highest_high = price_channel_values[ArrayMaximum(price_channel_values, 0, m_pricechannel_period)];
      return highest_high - atr_offset;
  }
  else
  {
      if(CopyLow(symbol, _Period, 1, m_pricechannel_period, price_channel_values) < m_pricechannel_period) return 0.0;
      double lowest_low = price_channel_values[ArrayMinimum(price_channel_values, 0, m_pricechannel_period)];
      return lowest_low + atr_offset;
  }
}



_______---------------------------------------------------------------------------------



 لطفا دقیق و بسیار با دقت برسی کنید و صادقانه نظرخود را بگوید 
بنظرت استراتژی چیه
برسی کن ببین جایی هست که مشکل داشته باشد 
؟؟؟



